{"version":3,"file":"static/js/437.7f7199ab.chunk.js","mappings":"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","sources":["ui/EmptyBox.tsx","analysis/info.ts","ui/nodes/NodeName.tsx","ui/PromisedValue.tsx","ui/tree/TreeContext.ts","ui/nodes/NodeSize.tsx","ui/tree/info/GroupSizesInfo.tsx","ui/tree/info/ActiveEdgeInfo.tsx","ui/tree/info/ActiveNodeInfo.tsx","ui/ChangeValue.tsx","ui/tree/info/LoadoutDialog.tsx","ui/tree/info/RootInfo.tsx","analysis/groups.ts","analysis/search.ts","ui/tree.ts","ui/tree/ElementListGroup.tsx","ui/tree/ElementList.tsx","ui/tree/NodeNavigatorItem.tsx","ui/tree/NodeNavigator.tsx","ui/nodes/EdgeSize.tsx","ui/tree/TreeItem.tsx","ui/tree/TreeLevel.tsx","ui/tree/TreePage.tsx"],"sourcesContent":["import { Stack } from \"@mui/material\"\nimport * as React from \"react\"\n\ntype Props = {\n  children: React.ReactNode\n  icon?: React.ReactNode\n}\n\nexport default function EmptyBox({ children, icon }: Props) {\n  return (\n    <Stack\n      direction=\"row\"\n      justifyContent=\"center\"\n      sx={{ padding: 2, color: \"text.secondary\" }}\n      spacing={2}\n    >\n      {icon}\n      <div>{children}</div>\n    </Stack>\n  )\n}\n","import type { GraphEdge, GraphNode, GraphNodeID } from \"./graph\"\n\nexport type EdgePath = GraphNodeID[]\n\n// https://regex101.com/r/yU5wqf/2\n// 1 - path to packages dir (null if no package)\n// 2 - package name (null if no package)\n// 3 - directory in package\n// 4 - filename\n// 5 - extension\nconst FILENAME_RE =\n  /^(?:(.*\\/(?:node_modules|web_modules|packages|~)\\/)((?:@[^/]+?\\/)?[^/]+))?(.*?\\/)?([^/]+)?(\\.[^./]+)?$/\n\ntype ModuleInfo = {\n  pathToPackage?: string\n  packageName?: string\n  path?: string\n  name?: string\n  extension?: string\n}\n\n// Checks if edge between nodes is local (within the same package)\nexport function isLocalEdge({ name }: GraphEdge): boolean {\n  return name ? name.startsWith(\".\") : false\n}\n\nexport function getModuleInfo({ file, name, id }: GraphNode): ModuleInfo {\n  if (!file) {\n    return { name: name || String(id) || \"(unknown)\" }\n  }\n  const found = file.match(FILENAME_RE)\n  if (!found) {\n    return { path: file }\n  }\n  return {\n    pathToPackage: found[1],\n    packageName: found[2],\n    path: found[3],\n    name: found[4],\n    extension: found[5],\n  }\n}\n\nexport function getPackageName({ file }: GraphNode): string {\n  if (!file) return \"\"\n  const found = file.match(FILENAME_RE)\n  return found ? found[2] : \"\"\n}\n\nexport function getPackageRelativeFilePath(node: GraphNode): string {\n  const { file } = node\n  if (!file) return \"\"\n  const pkg = getPackageName(node)\n  if (!pkg) return \"\"\n  return file.slice(file.indexOf(pkg) + pkg.length + 1)\n}\n\nexport function isExternal({ file }: GraphNode): boolean {\n  if (!file) return false\n  return file.indexOf(\"/node_modules/\") >= 0\n}\n\nexport function getFileExtension({ file }: GraphNode): string {\n  if (!file) return \"\"\n  const dot = file.lastIndexOf(\".\")\n  if (dot <= 0) return \"\"\n  return file.slice(dot + 1)\n}\n\nexport function getSourceLocation(\n  source: string | undefined,\n  location: string | undefined\n): string | undefined {\n  if (!source || !location) return undefined\n  const [rowsLoc, colsLoc] = location.split(\":\")\n  const [rowStart, rowEnd = rowStart + 1]: number[] = rowsLoc\n    .split(\"-\")\n    .map(Number)\n  const [colStart, colEnd = colStart + 1]: number[] = colsLoc\n    .split(\"-\")\n    .map(Number)\n  const lines = source.split(/\\n/g).slice(rowStart - 1, rowEnd - 1)\n  if (lines.length > 1) return lines.join(\"\\n\")\n  if (!lines.length) return undefined\n  return lines[0].slice(colStart, colEnd)\n}\n","import type { GraphNode } from \"../../analysis/graph\"\n\nimport * as React from \"react\"\nimport { Tooltip } from \"@mui/material\"\n\nimport { getModuleInfo } from \"../../analysis/info\"\nimport { makeStyles } from \"../makeStyles\"\n\ntype Props = {\n  node: GraphNode\n  hidePackage?: boolean\n  onlyPackage?: boolean\n  tooltip?: boolean | string\n  children?: React.ReactNode\n  className?: string\n}\n\nconst useStyles = makeStyles({ name: \"NodeSize\" })((theme) => ({\n  root: {\n    color: \"inherit\",\n    maxWidth: \"100%\",\n    display: \"inline-flex\",\n    flexDirection: \"row\",\n    whiteSpace: \"nowrap\",\n    overflow: \"hidden\",\n  },\n  packageName: {\n    textOverflow: \"ellipsis\",\n    flexShrink: 10,\n    overflow: \"hidden\",\n  },\n  path: {\n    textOverflow: \"ellipsis\",\n    flexShrink: 1000,\n    overflow: \"hidden\",\n    minWidth: 10,\n  },\n  name: {\n    textOverflow: \"ellipsis\",\n    flexShrink: 1,\n    overflow: \"hidden\",\n  },\n  extension: {\n    flexShrink: 0,\n  },\n  children: {},\n}))\n\nexport default function NodeName({\n  node,\n  hidePackage,\n  onlyPackage,\n  tooltip,\n  children,\n  className,\n}: Props) {\n  const { classes, cx } = useStyles()\n  // {selectFromNode && <a onClick={() => selectFromNode(node.id)}>From</a>}\n  // {selectToNode && <a onClick={() => selectToNode(node.id)}>To</a>}\n\n  const info = getModuleInfo(node)\n\n  const packageName = hidePackage ? \"\" : info.packageName\n  const path = onlyPackage ? \"\" : (info.path || \"\").replace(/^\\/|\\/$/g, \"\")\n  const name = onlyPackage ? \"\" : (info.name || \"\") + (info.extension || \"\")\n\n  const text = (\n    <span className={cx(className, classes.root)}>\n      {packageName && (\n        <span className={classes.packageName}>{packageName}</span>\n      )}\n      {packageName && path ? \"/\" : \"\"}\n      {path && <span className={classes.path}>{path}</span>}\n      {(packageName || path) && name ? \"/\" : \"\"}\n      {name && <span className={classes.name}>{name}</span>}\n      {(packageName || name) && children ? <span>,&nbsp;</span> : \"\"}\n      {children && <span className={classes.children}>{children}</span>}\n    </span>\n  )\n\n  if (tooltip) {\n    return (\n      <Tooltip\n        title={\n          typeof tooltip === \"boolean\"\n            ? `${node.kind}: ${node.name || \"\"} (${String(node.originalId)})`\n            : tooltip\n        }\n        placement=\"top\"\n        enterDelay={1000}\n        disableFocusListener\n      >\n        {text}\n      </Tooltip>\n    )\n  }\n\n  return text\n}\n","import ReportIcon from \"@mui/icons-material/Report\"\nimport { Skeleton } from \"@mui/material\"\nimport { ReactNode } from \"react\"\nimport { useStablePromise } from \"./hooks/promises\"\nimport { makeStyles } from \"./makeStyles\"\n\ntype Props<T> = {\n  className?: string\n  promise: Promise<T> | T\n  render: (value: T) => ReactNode\n  children?: never\n}\n\nconst useStyles = makeStyles({ name: \"PromisedValue\" })({\n  root: {\n    transition: \"opacity 100ms\",\n    opacity: 1,\n  },\n  oldValue: {\n    opacity: 0.5,\n  },\n  error: {\n    marginLeft: 4,\n  },\n})\n\nexport default function PromisedValue<T>({\n  promise,\n  render,\n  className,\n}: Props<T>) {\n  const { value, error, loading } = useStablePromise(promise)\n  const { classes, cx } = useStyles()\n  const hasValue = value !== undefined\n  return (\n    <span\n      className={cx(\n        className,\n        classes.root,\n        hasValue && (loading || error) && classes.oldValue\n      )}\n    >\n      {hasValue ? (\n        render(value)\n      ) : (\n        <Skeleton\n          style={{ display: \"inline-block\" }}\n          variant=\"text\"\n          width=\"5em\"\n        />\n      )}\n      {error ? (\n        <span title={String(error)} className={classes.error}>\n          <ReportIcon color=\"error\" />\n        </span>\n      ) : null}\n    </span>\n  )\n}\n","import { createContext, useContext } from \"react\"\nimport { EdgeChain } from \"../../analysis/chains\"\nimport {\n  Graph,\n  GraphEdge,\n  GraphEdgeID,\n  GraphElementID,\n  GraphNode,\n  GraphNodeID,\n} from \"../../analysis/graph\"\nimport { GraphWorkerClient } from \"../../analysis/worker/GraphWorkerClient\"\nimport { UpdateChangesFn } from \"../../logic/useGraphState\"\nimport { TogglePinnedFn } from \"../../logic/usePinnedState\"\nimport { PromiseTrackerFn } from \"../hooks/usePromiseTracker\"\n\nexport type TreeContextType = {\n  graph: Graph\n  graphWorker: GraphWorkerClient\n  pinned: ReadonlyArray<GraphNodeID>\n  togglePinned: TogglePinnedFn\n  enabledIds: ReadonlyArray<GraphElementID>\n  openedNodeIds: ReadonlyArray<GraphNodeID>\n  setOpenedNodeIds: (nodes: Array<GraphNodeID>) => void\n  activeNodeId: GraphNodeID | null\n  setActiveNodeId: (n: GraphNodeID | null) => void\n  activeEdgeId: GraphEdgeID | null\n  openNodeChain(n: ReadonlyArray<GraphNode>): void\n  trackLoading: PromiseTrackerFn\n  updateChanges: UpdateChangesFn\n  chains: EdgeChain[]\n  chainedNodeIds: GraphNodeID[]\n  getChildEdges: (\n    node: GraphNode\n  ) => ReadonlyArray<GraphEdge> | Promise<ReadonlyArray<GraphEdge>>\n}\n\nconst TreeContext = createContext<TreeContextType>(null as any)\n\nexport function useTreeContext() {\n  return useContext(TreeContext)\n}\n\nexport const TreeContextProvider = TreeContext.Provider\n","import { green, red } from \"@mui/material/colors\"\nimport { useMemo } from \"react\"\nimport { baseGraphFilter, currentGraphFilter } from \"../../analysis/filters\"\nimport type { GraphNode } from \"../../analysis/graph\"\nimport { formatSize } from \"../format\"\nimport { makeStyles } from \"../makeStyles\"\nimport PromisedValue from \"../PromisedValue\"\nimport { useTreeContext } from \"../tree/TreeContext\"\n\ntype Props = {\n  retainerRootNode?: GraphNode | null\n  node: GraphNode\n}\n\nconst useStyles = makeStyles({ name: \"NodeSize\" })((theme) => ({\n  bigger: {\n    color: red.A700,\n  },\n  smaller: {\n    color: green.A700,\n  },\n}))\n\nexport default function NodeSize({ node, retainerRootNode }: Props) {\n  const { classes } = useStyles()\n  const { graph, graphWorker } = useTreeContext()\n\n  const promise = useMemo(async () => {\n    const treeSizeCalculator = retainerRootNode\n      ? (filter: any) =>\n          graphWorker.calculateTreeSizeRetainedByNode(\n            retainerRootNode,\n            node,\n            filter\n          )\n      : (filter: any) => graphWorker.calculateTreeSize(node, filter)\n    return {\n      baseTreeSize: await treeSizeCalculator(baseGraphFilter),\n      treeSize: await treeSizeCalculator(currentGraphFilter),\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [graph, graphWorker, node, retainerRootNode])\n\n  return (\n    <PromisedValue\n      promise={promise}\n      render={({ baseTreeSize, treeSize }) => (\n        <>\n          {treeSize != null ? (\n            <>\n              <span>{formatSize(node.size)}</span>\n              {\" + \"}\n              <span>{formatSize(treeSize - node.size)}</span>\n            </>\n          ) : (\n            \"disconnected\"\n          )}\n          {baseTreeSize != null &&\n          treeSize != null &&\n          treeSize !== baseTreeSize ? (\n            <span\n              className={\n                treeSize > baseTreeSize ? classes.bigger : classes.smaller\n              }\n            >\n              {\" (\"}\n              {treeSize > baseTreeSize ? \"+\" : \"-\"}\n              {formatSize(Math.abs(treeSize - baseTreeSize))}\n              {\")\"}\n            </span>\n          ) : null}\n        </>\n      )}\n    />\n  )\n}\n","import { Tooltip } from \"@mui/material\"\nimport { currentGraphFilter } from \"../../../analysis/filters\"\nimport { GraphEdge, GraphNode } from \"../../../analysis/graph\"\nimport { formatSize } from \"../../format\"\nimport { useStablePromise } from \"../../hooks/promises\"\nimport { makeStyles } from \"../../makeStyles\"\nimport { useTreeContext } from \"../TreeContext\"\n\ntype Props = {\n  className?: string\n  node: GraphNode\n  retainerRootNode?: GraphNode\n  filter?: (e: GraphEdge) => boolean\n}\n\nconst useStyles = makeStyles({ name: \"GroupSizesInfo\" })({\n  bar: {\n    display: \"flex\",\n    borderRadius: 2,\n    overflow: \"hidden\",\n    transition: \"opacity 100ms\",\n    opacity: 1,\n    height: 16,\n    background: \"#333\",\n  },\n  loading: {\n    opacity: 0.5,\n  },\n  part: {\n    transition: \"width 100ms\",\n    overflow: \"hidden\",\n    textIndent: 4,\n    marginRight: 1,\n    fontSize: 10,\n    \"&:last-child\": { marginRight: 0 },\n    whiteSpace: \"nowrap\",\n  },\n})\n\nexport default function GroupSizesInfo({\n  className,\n  node,\n  retainerRootNode,\n  filter = currentGraphFilter,\n}: Props) {\n  const { classes, cx, theme } = useStyles()\n  const { graphWorker } = useTreeContext()\n\n  const { value, loading, error } = useStablePromise(\n    graphWorker.calculateGroupSizes(retainerRootNode, node, filter)\n  )\n  const groups = value || []\n  const overalSize = groups.reduce((sum, { size }) => sum + size, 0)\n\n  return (\n    <div\n      className={cx(\n        className,\n        classes.bar,\n        (loading || error) && classes.loading\n      )}\n    >\n      {groups.map(({ group, count, size }) => (\n        <Tooltip\n          key={group.name}\n          title={`${group.name}: ${formatSize(size)} in ${count} modules`}\n        >\n          <div\n            className={classes.part}\n            style={{\n              background: theme.palette[group.colorName].main,\n              color: theme.palette[group.colorName].contrastText,\n              width: `${Math.max(\n                1,\n                Math.round(((size || 1) / (overalSize || 1)) * 100)\n              )}%`,\n            }}\n          >\n            {group.name.toLocaleUpperCase()} ({formatSize(size)})\n          </div>\n        </Tooltip>\n      ))}\n    </div>\n  )\n}\n","import Flag from \"@mui/icons-material/Flag\"\nimport Star from \"@mui/icons-material/Star\"\nimport StarBorder from \"@mui/icons-material/StarBorder\"\nimport {\n  alpha,\n  Box,\n  IconButton,\n  Paper,\n  Tooltip,\n  Typography,\n} from \"@mui/material\"\nimport SyntaxHighlighter from \"react-syntax-highlighter\"\nimport syntaxStyle from \"react-syntax-highlighter/dist/esm/styles/hljs/hybrid\"\nimport { getNode, resolveEdge, resolveNode } from \"../../../analysis/graph\"\nimport EmptyBox from \"../../EmptyBox\"\nimport { makeStyles } from \"../../makeStyles\"\nimport NodeName from \"../../nodes/NodeName\"\nimport NodeSize from \"../../nodes/NodeSize\"\nimport { useTreeContext } from \"../TreeContext\"\nimport GroupSizesInfo from \"./GroupSizesInfo\"\n\ntype Props = {\n  className?: string\n}\n\nconst useStyles = makeStyles({ name: \"ActiveEdgeInfo\" })((theme) => ({\n  root: {\n    display: \"flex\",\n    flexDirection: \"column\",\n    padding: theme.spacing(2),\n  },\n  spacer: {\n    flexGrow: 1,\n  },\n  title: {\n    display: \"grid\",\n    grid: \"1fr / 1fr\",\n    gridAutoFlow: \"column\",\n  },\n  code: {\n    margin: 0,\n    marginTop: theme.spacing(1),\n    marginBottom: theme.spacing(1),\n    border: `1px solid ${alpha(theme.palette.text.primary, 0.1)}`,\n    borderRadius: 2,\n  },\n}))\n\nexport default function ActiveEdgeInfo({ className }: Props) {\n  const { classes, cx } = useStyles()\n  const {\n    graph,\n    activeEdgeId,\n    setActiveNodeId,\n    activeNodeId,\n    pinned,\n    togglePinned,\n  } = useTreeContext()\n  const edge = resolveEdge(graph, activeEdgeId)\n  const fromNode = resolveNode(graph, edge?.fromId)\n  const isPinned = edge ? pinned.includes(edge.toId) : false\n  return (\n    <Paper className={cx(className, classes.root)}>\n      <Box className={classes.title}>\n        <Typography variant=\"h6\" sx={{ marginBottom: 1 }}>\n          Active Import\n        </Typography>\n        {edge ? (\n          <>\n            <Tooltip title=\"Set as active module\">\n              <IconButton\n                onClick={() => setActiveNodeId(edge.toId)}\n                disabled={activeNodeId === edge.toId}\n              >\n                <Flag />\n              </IconButton>\n            </Tooltip>\n            <IconButton onClick={() => togglePinned({ id: edge.toId })}>\n              {isPinned ? <Star color=\"warning\" /> : <StarBorder />}\n            </IconButton>\n          </>\n        ) : null}\n      </Box>\n      {edge && fromNode ? (\n        <>\n          <NodeName node={getNode(graph, edge.toId)} tooltip />\n          <Typography variant=\"subtitle2\" sx={{ marginTop: 1 }}>\n            {\"imported by\"}\n          </Typography>\n          <NodeName node={fromNode} tooltip />\n          {edge.fromSource ? (\n            <SyntaxHighlighter\n              language=\"javascript\"\n              style={syntaxStyle}\n              className={classes.code}\n            >\n              {edge.fromSource || \"\"}\n            </SyntaxHighlighter>\n          ) : null}\n\n          <div className={classes.spacer} />\n\n          <Typography variant=\"subtitle2\" sx={{ marginTop: 1 }}>\n            {\"Dependencies used only by this module: \"}\n            <NodeSize\n              retainerRootNode={graph.root}\n              node={getNode(graph, edge.toId)}\n            />\n          </Typography>\n          <GroupSizesInfo\n            retainerRootNode={graph.root}\n            node={getNode(graph, edge.toId)}\n          />\n\n          <Typography variant=\"subtitle2\" sx={{ marginTop: 1 }}>\n            {\"Dependencies used by this module: \"}\n            <NodeSize node={getNode(graph, edge.toId)} />\n          </Typography>\n          <GroupSizesInfo node={getNode(graph, edge.toId)} />\n        </>\n      ) : (\n        <EmptyBox>Select import in the tree below</EmptyBox>\n      )}\n    </Paper>\n  )\n}\n","import CenterFocusStrong from \"@mui/icons-material/CenterFocusStrong\"\nimport CropFree from \"@mui/icons-material/CropFree\"\nimport Flag from \"@mui/icons-material/Flag\"\nimport Star from \"@mui/icons-material/Star\"\nimport StarBorder from \"@mui/icons-material/StarBorder\"\nimport { Box, IconButton, Paper, Tooltip, Typography } from \"@mui/material\"\nimport { startCase } from \"lodash\"\nimport { currentGraphFilter } from \"../../../analysis/filters\"\nimport { resolveNode } from \"../../../analysis/graph\"\nimport EmptyBox from \"../../EmptyBox\"\nimport { makeStyles } from \"../../makeStyles\"\nimport NodeName from \"../../nodes/NodeName\"\nimport NodeSize from \"../../nodes/NodeSize\"\nimport PromisedValue from \"../../PromisedValue\"\nimport { useTreeContext } from \"../TreeContext\"\nimport GroupSizesInfo from \"./GroupSizesInfo\"\n\ntype Props = {\n  className?: string\n}\n\nconst useStyles = makeStyles({ name: \"ActiveNodeInfo\" })((theme) => ({\n  root: {\n    display: \"flex\",\n    flexDirection: \"column\",\n    padding: theme.spacing(2),\n  },\n  spacer: {\n    flexGrow: 1,\n  },\n  title: {\n    display: \"grid\",\n    grid: \"1fr / 1fr\",\n    gridAutoFlow: \"column\",\n  },\n  ellipsis: {\n    whiteSpace: \"nowrap\",\n    textOverflow: \"ellipsis\",\n    overflow: \"hidden\",\n  },\n  scrollable: {\n    whiteSpace: \"nowrap\",\n    overflowX: \"auto\",\n  },\n}))\n\nexport default function ActiveNodeInfo({ className }: Props) {\n  const { classes, cx } = useStyles()\n  const {\n    graph,\n    graphWorker,\n    activeNodeId,\n    openNodeChain,\n    pinned,\n    togglePinned,\n    setActiveNodeId,\n  } = useTreeContext()\n  const node = resolveNode(graph, activeNodeId)\n  const isPinned = node ? pinned.includes(node.id) : false\n\n  return (\n    <Paper className={cx(className, classes.root)} sx={{ padding: 2 }}>\n      <Box className={classes.title}>\n        <Typography variant=\"h6\" sx={{ marginBottom: 1 }}>\n          Active {startCase(node?.kind || \"Module\")}\n        </Typography>\n        {node ? (\n          <>\n            <Tooltip title=\"Navigate to this module\">\n              <IconButton onClick={() => openNodeChain([node])}>\n                <CenterFocusStrong />\n              </IconButton>\n            </Tooltip>\n            <Tooltip title=\"Deactivate\">\n              <IconButton onClick={() => setActiveNodeId(null)}>\n                <CropFree />\n              </IconButton>\n            </Tooltip>\n            <IconButton onClick={() => togglePinned({ id: node.id })}>\n              {isPinned ? <Star color=\"warning\" /> : <StarBorder />}\n            </IconButton>\n          </>\n        ) : null}\n      </Box>\n      {node ? (\n        <>\n          <NodeName node={node} tooltip />\n          <Typography variant=\"subtitle2\" sx={{ marginTop: 1 }}>\n            {\"file\"}\n          </Typography>\n          <Box className={classes.scrollable}>{node.file}</Box>\n          <Typography variant=\"subtitle2\" sx={{ marginTop: 1 }}>\n            {\"imported by\"}\n          </Typography>\n          <Box>\n            <PromisedValue\n              promise={graphWorker.getEnabledParentEdges(\n                node,\n                currentGraphFilter\n              )}\n              render={(edges) =>\n                edges.length === 0\n                  ? \"nothing\"\n                  : edges.length === 1\n                  ? \"only 1 module\"\n                  : `${edges.length} modules`\n              }\n            />\n          </Box>\n\n          <div className={classes.spacer} />\n\n          <Typography variant=\"subtitle2\" sx={{ marginTop: 1 }}>\n            {\"Dependencies used only by this module: \"}\n            <NodeSize retainerRootNode={graph.root} node={node} />\n          </Typography>\n          <GroupSizesInfo retainerRootNode={graph.root} node={node} />\n\n          <Typography variant=\"subtitle2\" sx={{ marginTop: 1 }}>\n            {\"Dependencies used by this module: \"}\n            <NodeSize node={node} />\n          </Typography>\n          <GroupSizesInfo node={node} />\n        </>\n      ) : (\n        <EmptyBox>\n          Select module by clicking a <Flag fontSize=\"inherit\" /> on an import\n          or clicking an item in the tree below while holding <b>[shift]</b>\n        </EmptyBox>\n      )}\n    </Paper>\n  )\n}\n","import numeral from \"numeral\"\nimport { useStyles } from \"./makeStyles\"\n\ntype Props = {\n  className?: string\n  value: number | undefined | null\n  desc?: boolean\n  format: string\n  children?: never\n}\n\nexport default function ChangeValue({ value, desc, format, className }: Props) {\n  const { theme } = useStyles()\n  if (value == null) return null\n  const better = desc ? value < 0 : value > 0\n  return (\n    <span\n      className={className}\n      style={{\n        color: better\n          ? theme.palette.success.main\n          : value !== 0\n          ? theme.palette.error.main\n          : \"inherit\",\n      }}\n    >\n      {value > 0 ? \"+\" : value < 0 ? \"-\" : \"\"}\n      {numeral(Math.abs(value)).format(format)}\n    </span>\n  )\n}\n","import {\n  Button,\n  Dialog,\n  DialogActions,\n  DialogContent,\n  DialogContentText,\n  DialogTitle,\n  IconButton,\n  Stack,\n  TextField,\n} from \"@mui/material\"\nimport { addEdgeToggleChange } from \"../../../analysis/changes\"\nimport { useTreeContext } from \"../TreeContext\"\nimport SyntaxHighlighter from \"react-syntax-highlighter\"\nimport syntaxStyle from \"react-syntax-highlighter/dist/esm/styles/hljs/hybrid\"\nimport { useState } from \"react\"\nimport ContentCopy from \"@mui/icons-material/ContentCopy\"\n\ntype Props = {\n  open: boolean\n  onClose: () => void\n}\n\nconst snippet = `copy(Object.entries(window).filter(([k,v]) => k.startsWith('webpackChunk')).flatMap(([k,v]) => v.flatMap(([id]) => id)))`\n\nexport default function LoadoutDialog({ open, onClose }: Props) {\n  const { graph, updateChanges } = useTreeContext()\n  const [loadInfo, setLoadInfo] = useState(\"\")\n\n  let loadIds: any[] = []\n  let invalidLoadIds = false\n  try {\n    loadIds = JSON.parse(\"[\" + loadInfo + \"]\").flat()\n  } catch (e) {\n    console.error(e)\n    invalidLoadIds = true\n  }\n\n  // @ts-ignore\n  const onSubmit = () => {\n    const enableEdges = Object.values(graph.edges).filter(\n      (edge) =>\n        edge.async &&\n        edge.asyncIds &&\n        edge.asyncIds.some((id) => loadIds.includes(id))\n    )\n    console.log(\"Matched edges\", enableEdges)\n    if (enableEdges.length) {\n      updateChanges((changes) =>\n        enableEdges.reduce(\n          (changes, edge) => addEdgeToggleChange(graph, changes, edge, true),\n          changes\n        )\n      )\n    }\n    onClose()\n  }\n\n  return (\n    <Dialog open={open} onClose={onClose}>\n      <DialogTitle>\n        Pick loaded split points from a running application\n      </DialogTitle>\n      <DialogContent>\n        <DialogContentText>\n          Load the application, open it's console, run below code snippet and\n          paste the loaded chunk IDs below\n          <Stack direction=\"row\" alignItems=\"center\" gap={1}>\n            <SyntaxHighlighter language=\"javascript\" style={syntaxStyle}>\n              {snippet}\n            </SyntaxHighlighter>\n            <IconButton onClick={() => navigator.clipboard.writeText(snippet)}>\n              <ContentCopy />\n            </IconButton>\n          </Stack>\n        </DialogContentText>\n        <TextField\n          autoFocus\n          multiline\n          margin=\"dense\"\n          label=\"Loaded Chunk IDs\"\n          error={invalidLoadIds}\n          fullWidth\n          maxRows={5}\n          variant=\"standard\"\n          value={loadInfo}\n          onChange={(e) => setLoadInfo(e.target.value)}\n        />\n        <DialogActions>\n          <Button onClick={onClose}>Cancel</Button>\n          <Button\n            onClick={onSubmit}\n            disabled={invalidLoadIds || loadIds.length === 0}\n          >\n            Load\n          </Button>\n        </DialogActions>\n      </DialogContent>\n    </Dialog>\n  )\n}\n","import AutoFixHigh from \"@mui/icons-material/AutoFixHigh\"\nimport Clear from \"@mui/icons-material/Clear\"\nimport DoneAll from \"@mui/icons-material/DoneAll\"\nimport { Box, IconButton, Paper, Tooltip, Typography } from \"@mui/material\"\nimport numeral from \"numeral\"\nimport { useMemo, useState } from \"react\"\nimport {\n  addEdgeToggleChange,\n  resetEdgeToggles,\n} from \"../../../analysis/changes\"\nimport {\n  allAsyncAndEnabledFilter,\n  baseGraphFilter,\n  currentGraphFilter,\n} from \"../../../analysis/filters\"\nimport ChangeValue from \"../../ChangeValue\"\nimport { makeStyles } from \"../../makeStyles\"\nimport PromisedValue from \"../../PromisedValue\"\nimport { useTreeContext } from \"../TreeContext\"\nimport GroupSizesInfo from \"./GroupSizesInfo\"\nimport LoadoutDialog from \"./LoadoutDialog\"\n\ntype Props = {\n  className?: string\n}\n\nconst useStyles = makeStyles({ name: \"RootInfo\" })((theme) => ({\n  root: {\n    display: \"flex\",\n    flexDirection: \"column\",\n    padding: theme.spacing(2),\n  },\n  spacer: {\n    flexGrow: 1,\n  },\n  title: {\n    display: \"grid\",\n    grid: \"1fr / 1fr\",\n    gridAutoFlow: \"column\",\n  },\n}))\n\nexport default function RootInfo({ className }: Props) {\n  const { classes, cx } = useStyles()\n  const { graph, graphWorker, updateChanges } = useTreeContext()\n  const [showLoadoutDialog, setShowLoadoutDialog] = useState(false)\n\n  const sizePromise = useMemo(async () => {\n    const currentSize = await graphWorker.calculateTreeSize(\n      graph.root,\n      currentGraphFilter\n    )\n    const baseSize = await graphWorker.calculateTreeSize(\n      graph.root,\n      baseGraphFilter\n    )\n    const overallSize = await graphWorker.calculateTreeSize(\n      graph.root,\n      allAsyncAndEnabledFilter\n    )\n    return { currentSize, baseSize, overallSize }\n  }, [graph, graphWorker])\n\n  return (\n    <Paper className={cx(className, classes.root)}>\n      <Box className={classes.title}>\n        <Typography variant=\"h6\" sx={{ marginBottom: 1 }}>\n          Project\n        </Typography>\n        <Tooltip title=\"Unload everything\">\n          <IconButton\n            onClick={() =>\n              updateChanges((changes) => resetEdgeToggles(changes, true))\n            }\n          >\n            <Clear />\n          </IconButton>\n        </Tooltip>\n        <Tooltip title=\"Load everything\">\n          <IconButton\n            onClick={() =>\n              updateChanges((changes) =>\n                Object.values(graph.edges)\n                  .filter((edge) => edge.async)\n                  .reduce(\n                    (changes, edge) =>\n                      addEdgeToggleChange(graph, changes, edge, true),\n                    changes\n                  )\n              )\n            }\n          >\n            <DoneAll />\n          </IconButton>\n        </Tooltip>\n        <Tooltip title=\"Load from a running application\">\n          <IconButton onClick={() => setShowLoadoutDialog(true)}>\n            <AutoFixHigh />\n          </IconButton>\n        </Tooltip>\n      </Box>\n      <Box>\n        {\"Loaded \"}\n        <PromisedValue\n          promise={sizePromise}\n          render={({ currentSize, overallSize }) => (\n            <b>{Math.round((currentSize / overallSize) * 100)}%</b>\n          )}\n        />\n        {\" of split points (\"}\n        <PromisedValue\n          promise={sizePromise}\n          render={({ currentSize }) => (\n            <b>{numeral(currentSize).format(\"0[.]0b\")}</b>\n          )}\n        />\n        {\" of \"}\n        <PromisedValue\n          promise={sizePromise}\n          render={({ overallSize }) => (\n            <b>{numeral(overallSize).format(\"0[.]0b\")}</b>\n          )}\n        />\n        {\")\"}\n      </Box>\n      <Box>\n        {\"Changes give \"}\n        <PromisedValue\n          promise={sizePromise}\n          render={({ currentSize, baseSize }) => (\n            <b>\n              <ChangeValue\n                value={currentSize - baseSize}\n                desc\n                format=\"0[.]0b\"\n              />\n            </b>\n          )}\n        />\n        {\" difference in size\"}\n      </Box>\n      <div className={classes.spacer} />\n      <Typography variant=\"subtitle2\" sx={{ marginTop: 1 }}>\n        Loaded modules breakdown\n      </Typography>\n      <GroupSizesInfo node={graph.root} />\n      <Typography variant=\"subtitle2\" sx={{ marginTop: 1 }}>\n        All modules breakdown\n      </Typography>\n      <GroupSizesInfo node={graph.root} filter={allAsyncAndEnabledFilter} />\n\n      <LoadoutDialog\n        open={showLoadoutDialog}\n        onClose={() => setShowLoadoutDialog(false)}\n      />\n    </Paper>\n  )\n}\n","import { PaletteColor } from \"@mui/material\"\nimport { AppTheme } from \"../ui/theme\"\nimport { GraphNode } from \"./graph\"\nimport { ConditionalKeys } from \"type-fest\"\n\ntype GroupTestFn = (node: GraphNode) => boolean\n\nexport type GroupInfo = {\n  test: RegExp | GroupTestFn\n  name: string\n  colorName: ConditionalKeys<AppTheme[\"palette\"], PaletteColor>\n  priority: number\n}\ntype GroupsSpec = GroupInfo[]\n\nconst groupsSpec: GroupsSpec = [\n  {\n    test: /\\/node_modules\\//,\n    name: \"Vendors\",\n    colorName: \"groupVendors\",\n    priority: 1,\n  },\n  {\n    test: /\\.(m?jsx?|tsx?)$/,\n    name: \"JS\",\n    colorName: \"groupCode\",\n    priority: 30,\n  },\n  {\n    test: /\\.(css|scss|sass)$/,\n    name: \"CSS\",\n    colorName: \"groupStyles\",\n    priority: 12,\n  },\n  {\n    test: /\\.(jpe?g|png|gif|webm)$/,\n    name: \"Images\",\n    colorName: \"groupImages\",\n    priority: 11,\n  },\n  {\n    test: /\\.(graphql)$/,\n    name: \"GraphQL\",\n    colorName: \"groupOther\",\n    priority: 10,\n  },\n  {\n    test: /.*/,\n    name: \"Other\",\n    colorName: \"groupOther\",\n    priority: 5,\n  },\n]\n\nexport function getNodeGroup(node: GraphNode): GroupInfo {\n  for (const group of groupsSpec) {\n    if (typeof group.test === \"function\" && !group.test(node)) continue\n    if (\n      group.test instanceof RegExp &&\n      !group.test.test(node.file || \"<unknown>\")\n    )\n      continue\n    return group\n  }\n  throw new Error(`No group matched node ${node.id}`)\n}\n","import { Graph, GraphNode } from \"./graph\"\nimport { getNodeGroup } from \"./groups\"\n\nfunction getScore(text: string, search: string, negated: boolean) {\n  if (!text) return 0\n  let score = 0\n  if (text.includes(search)) score += 1\n  if (text.includes(\"/\" + search)) score += 1\n  if (text.includes(\"/\" + search + \"/\")) score += 1\n  if (text.endsWith(search)) score += 1\n  if (negated) score = score > 0 ? 0 : 1\n  if (score > 0) {\n    score += 1 - Math.min(1, text.length / 1000)\n  }\n  return score\n}\n\nfunction createMatcher(search: string) {\n  search = search.toLocaleLowerCase()\n  const negated = search[0] === \"!\"\n  if (negated) search = search.slice(1)\n  if (search[0] === \"#\") {\n    search = search.slice(1)\n    return (node: GraphNode) => {\n      const text = getNodeGroup(node).name.toLocaleLowerCase()\n      return getScore(text, search, negated)\n    }\n  }\n  return (node: GraphNode) => {\n    const text = (node.file || node.name || node.id).toLocaleLowerCase()\n    return getScore(text, search, negated)\n  }\n}\n\nexport function searchItems<T>(\n  graph: Graph,\n  items: ReadonlyArray<T>,\n  search: string,\n  getNodeFromItem: (graph: Graph, item: T) => GraphNode\n): ReadonlyArray<T> {\n  if (!search) return []\n  const matchers = search.split(\" \").map(createMatcher)\n  return items\n    .map((item) => {\n      const node = getNodeFromItem(graph, item)\n      let score = 0\n      for (const matcher of matchers) {\n        const matched = matcher(node)\n        if (!matched) return null\n        score += matched\n      }\n      return score > 0\n        ? { item, score, priority: getNodeGroup(node).priority }\n        : null\n    })\n    .filter(Boolean)\n    .sort(\n      (a, b) =>\n        Math.round(b.score) - Math.round(a.score) ||\n        b.priority - a.priority ||\n        b.score - a.score\n    )\n    .map(({ item }) => item)\n}\n","export type TreeState = {\n  expanded: ReadonlyArray<any>\n}\n\nexport type TreeOptions<T> = {\n  getChildren?: (a: any) => ReadonlyArray<T>\n  getKey?: (a: any) => any\n}\n\nconst defaultGetChildren = (row: any) => row.children\nconst defaultGetKey = (row: any) => row\n\nexport function isTreeExpanded(\n  state: TreeState,\n  row: any,\n  options: TreeOptions<any> = {}\n): boolean {\n  const { getKey = defaultGetKey } = options\n  return state.expanded.indexOf(getKey(row)) >= 0\n}\n\n// Flattens a tree of items into a flat set of rows, which can be then used in any list rendering lib\nexport function flattenTreeToRows<T>(\n  tree: ReadonlyArray<T>,\n  state: TreeState,\n  options: TreeOptions<T> = {}\n): ReadonlyArray<T> {\n  const result = []\n  const { getChildren = defaultGetChildren } = options\n  for (const row of tree) {\n    result.push(row)\n    if (isTreeExpanded(state, row, options)) {\n      const children = getChildren(row)\n      if (children && Array.isArray(children)) {\n        result.push(...flattenTreeToRows(children, state, options))\n      } else {\n        console.warn(\"Non-iterable row was expanded\", row)\n      }\n    }\n  }\n  return result\n}\n\nexport function toggleTreeRow(\n  state: TreeState,\n  row: any,\n  options: TreeOptions<any> = {},\n  expand?: boolean\n): TreeState {\n  const current = isTreeExpanded(state, row, options)\n  if (expand == null) {\n    expand = !current\n  }\n  if (expand === current) return state\n  const { getKey = defaultGetKey } = options\n  const key = getKey(row)\n  if (expand) {\n    return { ...state, expanded: [...state.expanded, key] }\n  } else {\n    return { ...state, expanded: state.expanded.filter((e) => e !== key) }\n  }\n}\n\nexport const toggleTreeRowState =\n  (row: any, options: TreeOptions<any> = {}) =>\n  (state: TreeState) =>\n    toggleTreeRow(state, row, options)\n","import ExpandLessIcon from \"@mui/icons-material/ExpandLess\"\nimport ExpandMoreIcon from \"@mui/icons-material/ExpandMore\"\nimport { ListItem, ListItemButton, ListItemText } from \"@mui/material\"\nimport { ReactNode } from \"react\"\nimport { formatSize } from \"../format\"\nimport { makeStyles } from \"../makeStyles\"\nimport { GroupElement } from \"./ElementList\"\n\nexport type ElementListGroupProps = {\n  className?: string\n  style?: any\n\n  group: GroupElement\n\n  expanded?: boolean\n  children?: ReactNode\n\n  onClick?: () => void\n  onDoubleClick?: () => void\n}\n\nconst useStyles = makeStyles({ name: \"ElementListGroup\" })((theme) => ({\n  root: {\n    padding: 0,\n    background: theme.palette.background.paper,\n    backgroundImage:\n      \"linear-gradient(rgba(255, 255, 255, 0.05), rgba(255, 255, 255, 0.05))\",\n    zIndex: 1,\n  },\n}))\n\nexport default function ElementListGroup({\n  className,\n  style,\n  group,\n  expanded,\n  onClick,\n}: ElementListGroupProps) {\n  const { classes, cx } = useStyles()\n\n  return (\n    <ListItem\n      className={cx(className, classes.root)}\n      dense\n      // @ts-expect-error mui\n      ContainerComponent=\"div\"\n      onClick={onClick}\n      disableGutters\n      style={\n        // sticky groups should only stick to top and be covered by other groups\n        (style?.position === \"sticky\"\n          ? { ...style, top: 0, bottom: undefined, zIndex: 0 }\n          : style) as any\n      }\n      divider\n    >\n      <ListItemButton>\n        <ListItemText\n          primary={group.name}\n          secondary={`${formatSize(group.size)} in ${group.children.length}`}\n        />\n        {expanded ? <ExpandLessIcon /> : <ExpandMoreIcon />}\n      </ListItemButton>\n    </ListItem>\n  )\n}\n","import ClearIcon from \"@mui/icons-material/Clear\"\nimport ScaleIcon from \"@mui/icons-material/Scale\"\nimport {\n  IconButton,\n  Input,\n  InputAdornment,\n  LinearProgress,\n  Tooltip,\n} from \"@mui/material\"\nimport {\n  groupBy,\n  map,\n  maxBy,\n  orderBy,\n  sortBy,\n  sumBy,\n  uniq,\n  without,\n} from \"lodash\"\nimport {\n  Fragment,\n  ReactElement,\n  ReactNode,\n  useCallback,\n  useMemo,\n  useRef,\n  useState,\n} from \"react\"\nimport { useVirtual } from \"react-virtual\"\nimport { currentGraphFilter } from \"../../analysis/filters\"\nimport { getNode, Graph, GraphNode, GraphNodeID } from \"../../analysis/graph\"\nimport { getPackageName } from \"../../analysis/info\"\nimport { searchItems } from \"../../analysis/search\"\nimport { GraphWorkerClient } from \"../../analysis/worker/GraphWorkerClient\"\nimport ErrorBox from \"../ErrorBox\"\nimport { useStablePromise } from \"../hooks/promises\"\nimport { makeStyles } from \"../makeStyles\"\nimport {\n  flattenTreeToRows,\n  isTreeExpanded,\n  toggleTreeRowState,\n  TreeState,\n} from \"../tree\"\nimport ElementListGroup from \"./ElementListGroup\"\n\nexport type RenderItemProps<T> = {\n  item: T\n  key: string\n  hidePackage: boolean\n  style: React.CSSProperties\n}\n\nexport type GroupElement = {\n  name: string\n  children: ReadonlyArray<any>\n  size: number\n  group: true\n}\n\nexport type OrderBySpec = [\n  ReadonlyArray<string | ((d: any) => any)>,\n  ReadonlyArray<boolean | \"asc\" | \"desc\">\n]\n\nexport type ElementListProps<T> = {\n  graph: Graph\n  graphWorker: GraphWorkerClient\n  items: ReadonlyArray<T>\n  stickyItems?: ReadonlyArray<T>\n  itemSize?: number\n  getNode?: (graph: Graph, item: T) => GraphNode\n  renderItem: (p: RenderItemProps<T>) => ReactElement<any>\n  renderEmpty: () => React.ReactNode\n  search?: string\n  pinned: ReadonlyArray<GraphNodeID>\n  groupItemsBy?: \"\" | \"package\"\n  orderItemsBy?: OrderBySpec\n  orderGroupsBy?: OrderBySpec\n  className?: string\n  listClassName?: string\n  children?: ReactNode\n  loading?: boolean\n  error?: any\n}\n\nfunction isGroup(item: any): item is GroupElement {\n  return \"group\" in item && item.group === true\n}\n\nconst useStyles = makeStyles({ name: \"ElementList\" })((theme) => ({\n  root: {\n    display: \"flex\",\n    flexDirection: \"column\" as const,\n    justifyContent: \"stretch\" as const,\n  },\n  search: {\n    marginTop: theme.spacing(1),\n    marginBottom: theme.spacing(1),\n  },\n  listContainer: {\n    flexGrow: 1,\n    position: \"relative\" as const,\n    overflow: \"auto\",\n  },\n  list: {\n    width: \"100%\",\n    position: \"relative\" as const,\n  },\n}))\n\ntype Group<T> = {\n  name: string\n  children: ReadonlyArray<T>\n  size: number\n  group: true\n}\n\nconst treeOptions = { getKey: (group: any) => isGroup(group) && group.name }\n\nfunction getNodeFromElement(graph: Graph, element: any): GraphNode {\n  if (\"toId\" in element) {\n    return getNode(graph, element.toId)\n  }\n  if (\"id\" in element && \"parents\" in element) {\n    return element\n  }\n  throw new Error(\"Unknown element type\")\n}\n\nfunction ElementList<T>({\n  className,\n  listClassName,\n  renderItem,\n  renderEmpty,\n  items,\n  itemSize = 64,\n  stickyItems = [],\n  getNode = getNodeFromElement,\n  graph,\n  graphWorker,\n  pinned,\n  orderItemsBy,\n  groupItemsBy,\n  orderGroupsBy,\n  loading,\n  error,\n  children,\n}: ElementListProps<T>) {\n  const { classes, cx } = useStyles()\n  const [search, setSearch] = useState(\"\")\n  const [treeState, setTreeState] = useState<TreeState>({ expanded: [] })\n  const [useTreeSize, setUseTreeSize] = useState(false)\n\n  const isSearching = !!search\n  const isGrouping = !isSearching && groupItemsBy\n\n  let {\n    value: preppedItems = items,\n    loading: prepLoading,\n    error: prepError,\n  } = useStablePromise(\n    useMemo(() => {\n      // update `treeSize` in nodes, so items can be properly sorted when searching\n      if (useTreeSize) {\n        return Promise.all(\n          items.map(async (item) => {\n            const node = getNode(graph, item)\n            node.treeSize =\n              (await graphWorker.calculateTreeSizeRetainedByNode(\n                graph.root,\n                node,\n                currentGraphFilter\n              )) || 0\n            return item\n          })\n        )\n      }\n      return items\n    }, [getNode, graph, graphWorker, useTreeSize, items])\n  )\n  // while loading, we should fallback to unprepped items - otherwise we may keep reference to item list with a different format\n  if (prepLoading) preppedItems = items\n\n  const filteredItems = useMemo<ReadonlyArray<T>>(() => {\n    const searchedItems = search\n      ? searchItems(graph, preppedItems, search, getNode)\n      : preppedItems\n    if (useTreeSize) {\n      return orderBy(searchedItems, (item) => getNode(graph, item).treeSize, [\n        \"desc\",\n      ])\n    }\n    if (orderItemsBy && !search) {\n      return orderBy(searchedItems, ...orderItemsBy)\n    }\n    return searchedItems\n  }, [search, graph, preppedItems, getNode, useTreeSize, orderItemsBy])\n\n  const pinnedItems = useMemo<ReadonlyArray<T>>(\n    () =>\n      filteredItems.filter((item) => pinned.includes(getNode(graph, item).id)),\n    [filteredItems, pinned, getNode, graph]\n  )\n\n  const listItems = useMemo(() => {\n    let rows: Array<Group<T> | T>\n    if (isGrouping && groupItemsBy === \"package\") {\n      const groups = groupBy(filteredItems, (item) => {\n        const node = getNode(graph, item)\n        if (node.kind === \"module\") {\n          return getPackageName(node) || \"(root modules)\"\n        }\n        return `(${node.kind}s)`\n      })\n      rows = map(groups, (children, name) => ({\n        name,\n        children,\n        size: useTreeSize\n          ? Math.max(\n              ...children.map((item) => getNode(graph, item).treeSize || 0)\n            )\n          : sumBy(children, (item) => getNode(graph, item).size || 0),\n        group: true,\n      }))\n      if (orderGroupsBy) rows = orderBy(rows, ...orderGroupsBy)\n    } else {\n      rows = without(filteredItems, ...pinnedItems)\n    }\n    rows.unshift(...pinnedItems)\n    return flattenTreeToRows(rows, treeState, treeOptions)\n  }, [\n    isGrouping,\n    groupItemsBy,\n    pinnedItems,\n    treeState,\n    filteredItems,\n    orderGroupsBy,\n    getNode,\n    graph,\n    useTreeSize,\n  ])\n\n  const stickyGroupHeaders = useMemo(() => {\n    if (!groupItemsBy) return []\n    let stickyGroupHeaders = []\n    for (const item of listItems) {\n      if (isGroup(item) && isTreeExpanded(treeState, item, treeOptions)) {\n        stickyGroupHeaders.push(item)\n      }\n    }\n    return stickyGroupHeaders\n  }, [groupItemsBy, listItems, treeState])\n\n  const stickyIndexes = uniq([...stickyItems, ...stickyGroupHeaders])\n    .map((item) => listItems.indexOf(item))\n    .filter((index) => index >= 0)\n    .sort((a, b) => a - b)\n\n  const renderIndex = ({\n    index,\n    style,\n  }: {\n    index: number\n    style: React.CSSProperties\n  }) => {\n    if (stickyIndexes.includes(index) && style.position !== \"sticky\")\n      return null\n    const item = listItems[index]\n    if (isGroup(item)) {\n      return (\n        <ElementListGroup\n          group={item}\n          expanded={isTreeExpanded(treeState, item, treeOptions)}\n          onClick={() => setTreeState(toggleTreeRowState(item, treeOptions))}\n          // drop `bottom` for sticky group headers\n          style={style as any}\n          key={index}\n        />\n      )\n    } else {\n      return renderItem({\n        item: item as Exclude<T, Group<T>>,\n        key: String(index),\n        hidePackage: isGrouping ? index >= pinnedItems.length : false,\n        style,\n      })\n    }\n  }\n\n  const stickyElements = stickyIndexes.map((index, sticked) => {\n    const lastIndex = (stickyIndexes[sticked - 1] ?? -1) + 1\n    return (\n      <Fragment key={String(index)}>\n        <div style={{ height: (index - lastIndex) * itemSize }} />\n        {renderIndex({\n          index,\n          style: {\n            top: Math.min(3, sticked) * itemSize,\n            bottom: Math.min(3, stickyIndexes.length - sticked - 1) * itemSize,\n            left: 0,\n            width: \"100%\",\n            height: itemSize,\n            position: \"sticky\",\n            zIndex: 1,\n          },\n        })}\n      </Fragment>\n    )\n  })\n\n  const estimateSize = useCallback(() => itemSize ?? 64, [itemSize])\n  const parentRef = useRef<HTMLDivElement>(null)\n  const { virtualItems, totalSize } = useVirtual({\n    size: listItems.length,\n    parentRef,\n    estimateSize,\n  })\n\n  return (\n    <div className={cx(className, classes.root)}>\n      <Input\n        className={classes.search}\n        type=\"text\"\n        value={search}\n        onChange={(el) => setSearch(el.target.value)}\n        endAdornment={\n          <InputAdornment position=\"end\">\n            {search && (\n              <IconButton\n                color=\"inherit\"\n                aria-label=\"Clear search\"\n                onClick={() => setSearch(\"\")}\n                size=\"small\"\n              >\n                <ClearIcon fontSize=\"small\" color=\"inherit\" />\n              </IconButton>\n            )}\n            <Tooltip title=\"Sort by retained size\">\n              <IconButton\n                size=\"small\"\n                onClick={() => setUseTreeSize(!useTreeSize)}\n              >\n                <ScaleIcon\n                  fontSize=\"small\"\n                  color={useTreeSize ? \"primary\" : \"disabled\"}\n                />\n              </IconButton>\n            </Tooltip>\n          </InputAdornment>\n        }\n        placeholder=\"Search\"\n      />\n      <LinearProgress\n        sx={{\n          visibility: loading || prepLoading ? \"visible\" : \"hidden\",\n          width: \"100%\",\n        }}\n      />\n      {error || (prepError && <ErrorBox error={error || prepError} />)}\n\n      <div className={cx(classes.listContainer, listClassName)} ref={parentRef}>\n        <div style={{ height: 0 }}>\n          <div className={cx(classes.list)} style={{ height: totalSize }}>\n            {virtualItems.map((row) =>\n              renderIndex({\n                index: row.index,\n                style: {\n                  position: \"absolute\",\n                  left: 0,\n                  width: \"100%\",\n                  top: row.start,\n                  height: itemSize,\n                },\n              })\n            )}\n            {listItems.length === 0 ? renderEmpty() : null}\n            {children}\n            {stickyElements}\n          </div>\n        </div>\n      </div>\n    </div>\n  )\n}\n\nexport default ElementList\n","import { ListItem, ListItemText, ListItemButton } from \"@mui/material\"\nimport { MouseEvent, ReactNode } from \"react\"\nimport { GraphNode, resolveEdge } from \"../../analysis/graph\"\nimport { getNodeGroup } from \"../../analysis/groups\"\nimport { makeStyles } from \"../makeStyles\"\nimport NodeName from \"../nodes/NodeName\"\nimport NodeSize from \"../nodes/NodeSize\"\nimport { useTreeContext } from \"./TreeContext\"\n\nexport type NodeNavigatorItemProps = {\n  className?: string\n  style?: any\n\n  node: GraphNode\n  retainerRootNode?: GraphNode | null\n  hidePackage?: boolean\n\n  selected?: boolean\n  children?: ReactNode\n\n  onClick?: (event: MouseEvent<any>) => void\n  onDoubleClick?: (event: MouseEvent<any>) => void\n}\n\nconst useStyles = makeStyles({ name: \"NodeNavigatorItem\" })((theme) => ({\n  NodeNavigatorItem: {\n    padding: 0,\n  },\n  disabled: {\n    opacity: 0.5,\n  },\n  activeNode: {\n    border: `1px solid ${theme.graph.treeLineColor.chained}`,\n    borderRadius: 2,\n  },\n}))\n\nexport default function NodeNavigatorItem({\n  className,\n  style,\n  node,\n  selected,\n  hidePackage,\n  retainerRootNode,\n  onClick,\n  onDoubleClick,\n  children,\n}: NodeNavigatorItemProps) {\n  const { classes, cx, theme } = useStyles()\n  const { graph, activeNodeId, activeEdgeId } = useTreeContext()\n  const activeEdge = resolveEdge(graph, activeEdgeId)\n  const isActiveNode = activeNodeId === node.id\n  const isActiveEdge = activeEdge?.toId === node.id\n  const group = getNodeGroup(node)\n\n  return (\n    <div style={style}>\n      <ListItem\n        dense\n        disableGutters\n        // @ts-expect-error mui\n        ContainerComponent=\"div\"\n        selected={isActiveEdge}\n        // @ts-expect-error event\n        onClick={onClick}\n        // @ts-expect-error event\n        onDoubleClick={onDoubleClick}\n        className={cx(\n          className,\n          classes.NodeNavigatorItem,\n          isActiveNode && classes.activeNode\n        )}\n      >\n        <ListItemButton>\n          <ListItemText\n            primary={<NodeName node={node} hidePackage={hidePackage} tooltip />}\n            primaryTypographyProps={{\n              noWrap: true,\n              color: theme.palette[group.colorName].main,\n              fontWeight: isActiveEdge ? \"bold\" : \"initial\",\n            }}\n            secondary={\n              <NodeSize node={node} retainerRootNode={retainerRootNode} />\n            }\n          />\n          {children}\n        </ListItemButton>\n      </ListItem>\n    </div>\n  )\n}\n","import BlockIcon from \"@mui/icons-material/Block\"\nimport { FormControl, InputLabel, MenuItem, Select } from \"@mui/material\"\nimport { MouseEvent, useMemo, useState } from \"react\"\nimport { Graph, GraphNode } from \"../../analysis/graph\"\nimport EmptyBox from \"../EmptyBox\"\nimport { useStablePromise } from \"../hooks/promises\"\nimport { makeStyles } from \"../makeStyles\"\nimport ElementList, { ElementListProps, RenderItemProps } from \"./ElementList\"\nimport NodeNavigatorItem, { NodeNavigatorItemProps } from \"./NodeNavigatorItem\"\nimport { useTreeContext } from \"./TreeContext\"\n\nexport type NavigatorMode<T> = {\n  getItems: () => ReadonlyArray<T> | Promise<ReadonlyArray<T>>\n  getItemNode?: (graph: Graph, item: T) => GraphNode\n  activateItem?: (item: T, event: MouseEvent<any>) => void\n  renderTitle: () => React.ReactNode\n  renderEmpty: () => string\n  listProps?: () => Partial<ElementListProps<T>>\n  itemProps?: (a: RenderItemProps<T>) => Partial<NodeNavigatorItemProps>\n}\n\nexport type NavigatorModes = Record<string, NavigatorMode<any>>\n\ntype Props = {\n  className?: string\n  modes: NavigatorModes\n}\n\nconst useStyles = makeStyles({ name: \"NodeNavigator\" })((theme) => ({\n  NodeNavigator: {\n    display: \"flex\",\n    position: \"relative\",\n    flexDirection: \"column\",\n    justifyContent: \"stretch\",\n  },\n  list: {\n    flexGrow: 1,\n  },\n  listProgress: {\n    marginTop: 16,\n  },\n}))\n\nexport default function NodeNavigator({ className, modes }: Props) {\n  const { classes, cx } = useStyles()\n  const [modeId, setModeId] = useState<string | null>(null)\n  const defaultModeId = Object.keys(modes)[0]\n  const mode = (modeId && modes[modeId]) || modes[defaultModeId]\n\n  const { graph, graphWorker, pinned, setActiveNodeId, openNodeChain } =\n    useTreeContext()\n\n  const nodesPromise = useMemo(() => mode.getItems(), [mode])\n\n  const { value: nodes, loading, error } = useStablePromise(nodesPromise)\n  // mode that was defined for the last returned items (so that getItemNode operates on correct set of nodes)\n  const nodesMode = useMemo(\n    () => mode,\n\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [nodes]\n  )\n  const { getItemNode = (_: any, item: any) => item } = nodesMode\n\n  return (\n    <div className={cx(className, classes.NodeNavigator)}>\n      <FormControl fullWidth>\n        <InputLabel id=\"NodeNavigator-mode-label\">Display</InputLabel>\n        <Select\n          labelId=\"NodeNavigator-mode-label\"\n          value={modeId && modes[modeId] ? modeId : defaultModeId}\n          label=\"Display\"\n          onChange={() => {}}\n        >\n          {Object.entries(modes).map(([id, mode]) => (\n            <MenuItem\n              key={id}\n              value={id}\n              onClick={() => {\n                setModeId(id)\n              }}\n            >\n              {mode.renderTitle()}\n            </MenuItem>\n          ))}\n        </Select>\n      </FormControl>\n      {nodes && (\n        <ElementList\n          className={classes.list}\n          items={nodes}\n          getNode={getItemNode}\n          graph={graph}\n          graphWorker={graphWorker}\n          pinned={pinned}\n          groupItemsBy=\"package\"\n          orderItemsBy={[[\"file\"], [\"asc\"]]}\n          orderGroupsBy={[[\"size\"], [\"desc\"]]}\n          loading={loading}\n          error={error}\n          renderItem={({ item, ...itemProps }) => {\n            const node = getItemNode(graph, item)\n            return (\n              <NodeNavigatorItem\n                {...itemProps}\n                node={node}\n                retainerRootNode={graph.root}\n                onClick={(event) => {\n                  if (nodesMode.activateItem)\n                    nodesMode.activateItem(item, event)\n                  else {\n                    if (event.shiftKey) setActiveNodeId(node.id)\n                    openNodeChain([node])\n                  }\n                }}\n                {...(nodesMode.itemProps &&\n                  nodesMode.itemProps({ item, ...itemProps }))}\n              ></NodeNavigatorItem>\n            )\n          }}\n          renderEmpty={() => (\n            <EmptyBox icon={<BlockIcon />}>{mode.renderEmpty()}</EmptyBox>\n          )}\n        />\n      )}\n    </div>\n  )\n}\n","import { green, red } from \"@mui/material/colors\"\nimport { useMemo } from \"react\"\nimport { baseGraphFilter, currentGraphFilter } from \"../../analysis/filters\"\nimport { getNode, GraphEdge, GraphNode } from \"../../analysis/graph\"\nimport { formatSize } from \"../format\"\nimport { makeStyles } from \"../makeStyles\"\nimport PromisedValue from \"../PromisedValue\"\nimport { useTreeContext } from \"../tree/TreeContext\"\n\ntype Props = {\n  retainerRootNode: GraphNode\n  edge: GraphEdge\n}\n\nconst useStyles = makeStyles({ name: \"EdgeSize\" })((theme) => ({\n  bigger: {\n    color: red.A700,\n  },\n  smaller: {\n    color: green.A700,\n  },\n}))\n\nexport default function EdgeSize({ edge, retainerRootNode }: Props) {\n  const { classes } = useStyles()\n  const { graph, graphWorker } = useTreeContext()\n  const node = getNode(graph, edge.toId)\n\n  const promise = useMemo(async () => {\n    return {\n      baseTreeSize: await graphWorker.calculateTreeSizeRetainedByEdge(\n        retainerRootNode,\n        edge,\n        baseGraphFilter\n      ),\n      treeSize: await graphWorker.calculateTreeSizeRetainedByEdge(\n        retainerRootNode,\n        edge,\n        currentGraphFilter\n      ),\n      nodeTreeSize: await graphWorker.calculateTreeSizeRetainedByNode(\n        retainerRootNode,\n        node,\n        currentGraphFilter\n      ),\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [graph, graphWorker, node, retainerRootNode])\n\n  return (\n    <PromisedValue\n      promise={promise}\n      render={({ baseTreeSize, treeSize, nodeTreeSize }) => (\n        <>\n          <span>{formatSize(treeSize)}</span>\n          {baseTreeSize != null && treeSize !== baseTreeSize ? (\n            <span\n              className={\n                treeSize > baseTreeSize ? classes.bigger : classes.smaller\n              }\n            >\n              {\" (\"}\n              {treeSize > baseTreeSize ? \"+\" : \"-\"}\n              {formatSize(Math.abs(treeSize - baseTreeSize))}\n              {\")\"}\n            </span>\n          ) : null}\n\n          {nodeTreeSize && nodeTreeSize !== treeSize ? (\n            <>\n              {\" | \"}\n              <span>{formatSize(nodeTreeSize)}</span>\n            </>\n          ) : null}\n        </>\n      )}\n    />\n  )\n}\n","import { ChangeCircle } from \"@mui/icons-material\"\nimport DownloadForOfflineIcon from \"@mui/icons-material/DownloadForOffline\"\nimport DownloadForOfflineOutlinedIcon from \"@mui/icons-material/DownloadForOfflineOutlined\"\nimport {\n  Checkbox,\n  IconButton,\n  ListItem,\n  ListItemButton,\n  ListItemIcon,\n  ListItemText,\n} from \"@mui/material\"\nimport { MouseEvent, useCallback, useMemo } from \"react\"\nimport { addEdgeToggleChange } from \"../../analysis/changes\"\nimport {\n  currentGraphFilter,\n  stopOnAsyncModulesFilter,\n} from \"../../analysis/filters\"\nimport {\n  getEdgeId,\n  getEdges,\n  getEdgesFromChain,\n  getNode,\n  Graph,\n  GraphEdge,\n  GraphNode,\n  GraphNodeID,\n  resolveEdge,\n  resolveNode,\n  ROOT_NODE_ID,\n} from \"../../analysis/graph\"\nimport { getNodeGroup } from \"../../analysis/groups\"\nimport { useStablePromise } from \"../hooks/promises\"\nimport { makeStyles } from \"../makeStyles\"\nimport EdgeSize from \"../nodes/EdgeSize\"\nimport NodeName from \"../nodes/NodeName\"\nimport { AppTheme } from \"../theme\"\nimport { useTreeContext } from \"./TreeContext\"\n\ntype Props = {\n  className?: string\n  style?: any\n\n  edge: GraphEdge\n  retainerRootNode?: GraphNode | null\n  hidePackage?: boolean\n  levelIndex: number\n\n  selected?: boolean\n\n  onClick?: (event: MouseEvent<any>) => void\n  onDoubleClick?: (event: MouseEvent<any>) => void\n}\n\ntype EdgeProps = {\n  enabled: boolean\n  chained: boolean\n  cycled: boolean\n}\n\nexport function getLineColor(\n  theme: AppTheme,\n  { enabled, chained, cycled }: EdgeProps\n) {\n  return !enabled\n    ? theme.graph.treeLineColor.disabled\n    : cycled\n    ? theme.graph.treeLineColor.cycled\n    : chained\n    ? theme.graph.treeLineColor.chained\n    : theme.graph.treeLineColor.enabled\n}\n\ntype EdgeChainState = false | \"start\" | \"end\" | \"middle\" | \"lone\"\n\nfunction getChainedState({\n  graph,\n  edge,\n  activeNodeId,\n  containsActiveNode,\n}: {\n  graph: Graph\n  edge: GraphEdge\n  activeNodeId: GraphNodeID | null\n  containsActiveNode: boolean\n}): EdgeChainState {\n  if (containsActiveNode && edge.fromId === ROOT_NODE_ID) return \"start\"\n  if (containsActiveNode) return \"middle\"\n  return edge.toId === activeNodeId ? \"end\" : false\n}\n\nfunction getCycledState({\n  graph,\n  edge,\n  levelIndex,\n  openedNodeIds,\n  activeNode,\n}: {\n  graph: Graph\n  edge: GraphEdge\n  activeNode: GraphNode | null | undefined\n  levelIndex: number\n  openedNodeIds: ReadonlyArray<GraphNodeID>\n}): EdgeChainState {\n  // is this edge already opened?\n  const isCycleEnd = openedNodeIds.slice(0, levelIndex + 1).includes(edge.toId)\n  const isOpened = openedNodeIds[levelIndex + 1] === edge.toId\n\n  let cycleStartIndex\n  let cycleEndIndex = isCycleEnd ? levelIndex : undefined\n  if (activeNode) {\n    // index where the active node is opened\n    const activeLevelIndex = openedNodeIds.indexOf(activeNode.id)\n    // find node that imports the active one again\n    const cyclingNodeId =\n      activeLevelIndex > 0\n        ? openedNodeIds\n            .slice(activeLevelIndex)\n            .find((nodeId) =>\n              resolveEdge(graph, getEdgeId(nodeId, activeNode.id))\n            )\n        : null\n    if (cyclingNodeId) {\n      cycleStartIndex = activeLevelIndex\n      cycleEndIndex = openedNodeIds.indexOf(cyclingNodeId)\n    }\n  }\n  if (isCycleEnd && (cycleStartIndex == null || activeNode?.id !== edge.toId))\n    return \"lone\"\n  if (isCycleEnd) return \"end\"\n  if (!isOpened || cycleStartIndex == null || cycleEndIndex == null)\n    return false\n  if (levelIndex === cycleStartIndex) return \"start\"\n  if (levelIndex > cycleStartIndex && levelIndex < cycleEndIndex)\n    return \"middle\"\n  return false\n}\n\nexport default function TreeItem({\n  className,\n  style,\n  edge,\n  selected,\n  hidePackage,\n  retainerRootNode,\n  onClick,\n  onDoubleClick,\n  levelIndex,\n}: Props) {\n  const {\n    graph,\n    graphWorker,\n    updateChanges,\n    enabledIds,\n    activeNodeId,\n    activeEdgeId,\n    openedNodeIds,\n    setActiveNodeId,\n  } = useTreeContext()\n  const activeNode = activeNodeId === edge.toId\n  const activeEdge = activeEdgeId === edge.id\n  const opened = openedNodeIds[levelIndex + 1] === edge.toId\n  const node = getNode(graph, edge.toId)\n\n  const enabled = enabledIds.includes(edge.id)\n  const toggleable =\n    edge.async ||\n    enabledIds.includes(edge.id) ||\n    enabledIds.includes(edge.fromId)\n\n  const containsActiveNodeState = useStablePromise(\n    useMemo(\n      () =>\n        activeNodeId\n          ? graphWorker\n              .getDeepNodeChildren(node, currentGraphFilter)\n              .then((ids) => ids.includes(activeNodeId))\n          : false,\n      // eslint-disable-next-line react-hooks/exhaustive-deps\n      [graph, activeNodeId, graphWorker, node]\n    )\n  )\n  const chained = getChainedState({\n    graph,\n    edge,\n    activeNodeId,\n    containsActiveNode:\n      !containsActiveNodeState.loading && !!containsActiveNodeState.value,\n  })\n  const cycled = getCycledState({\n    graph,\n    edge,\n    activeNode: resolveNode(graph, activeNodeId),\n    openedNodeIds,\n    levelIndex,\n  })\n\n  const { classes, cx, theme } = useStyles({\n    enabled,\n    chained,\n    activeEdge,\n    activeNode,\n    opened,\n    cycled,\n  })\n\n  const handleToggleChange = useCallback(\n    async (event: MouseEvent<HTMLButtonElement>) => {\n      const enabled = (event.target as HTMLInputElement).checked\n      const changeEdges = [edge]\n      if (edge.async && enabled) {\n        // for async edges, we want to enable async parent edges (on a single chain is enough)\n        // but only if it's not already enabled...\n        const [parentChain] = await graphWorker.findChains(\n          graph.root,\n          getNode(graph, edge.toId),\n          currentGraphFilter\n        )\n        if (!parentChain) {\n          const [parentDisabledChain = []] = await graphWorker.findChains(\n            graph.root,\n            getNode(graph, edge.toId)\n          )\n          changeEdges.push(\n            ...getEdgesFromChain(graph, parentDisabledChain).filter(\n              (e) => !e.enabled\n            )\n          )\n        }\n      }\n      if (edge.async && (event.shiftKey || event.altKey)) {\n        // toggle all child async edges\n        changeEdges.push(\n          ...getEdges(\n            graph,\n            await graphWorker.getAsyncEdges(\n              getNode(graph, edge.toId),\n              event.shiftKey ? stopOnAsyncModulesFilter : undefined\n            )\n          )\n        )\n      }\n      // if (edge)\n      updateChanges((changes) =>\n        changeEdges.reduce(\n          (changes, changeEdge) =>\n            addEdgeToggleChange(graph, changes, changeEdge, enabled),\n          changes\n        )\n      )\n    },\n    [edge, graph, graphWorker, updateChanges]\n  )\n\n  const group = getNodeGroup(getNode(graph, edge.toId))\n\n  const checkboxProps = edge.async\n    ? ({\n        icon: <DownloadForOfflineOutlinedIcon />,\n        checkedIcon: <DownloadForOfflineIcon />,\n        color: group.colorName as any, // \"graphAsync\",\n      } as const)\n    : {\n        color: group.colorName as any,\n      }\n\n  return (\n    <div style={style} className={classes.root}>\n      <ListItem\n        dense\n        disableGutters\n        // @ts-expect-error mui\n        ContainerComponent=\"div\"\n        selected={selected}\n        // @ts-expect-error event\n        onClick={onClick}\n        // @ts-expect-error event\n        onDoubleClick={onDoubleClick}\n        className={cx(className, classes.edge)}\n      >\n        <ListItemButton sx={{ width: \"100%\" }}>\n          <ListItemIcon>\n            <Checkbox\n              checked={edge.enabled}\n              disabled={!toggleable}\n              {...checkboxProps}\n              onClick={(event) => {\n                // so that edge isn't selected by clicking\n                event.stopPropagation()\n                // @ts-expect-error\n                handleToggleChange(event)\n              }}\n              // onChange={handleToggleChange}\n            />\n          </ListItemIcon>\n          <ListItemText\n            primary={\n              edge.name || (\n                <NodeName\n                  node={getNode(graph, edge.toId)}\n                  hidePackage={hidePackage}\n                  tooltip\n                />\n              )\n              // <NodeName node={getNode(graph, edge.toId)} hidePackage={hidePackage} tooltip />\n            }\n            primaryTypographyProps={{\n              noWrap: true,\n              fontWeight: activeEdge ? \"bold\" : \"initial\",\n              color: theme.palette[group.colorName].main,\n            }}\n            secondary={\n              <EdgeSize\n                edge={edge}\n                retainerRootNode={retainerRootNode || graph.root}\n              />\n            }\n          />\n          {(cycled === \"lone\" || cycled === \"end\") && (\n            <IconButton\n              onClick={(event) => {\n                event.stopPropagation()\n                setActiveNodeId(edge.toId)\n              }}\n            >\n              <ChangeCircle className={classes.cycleIcon} />\n            </IconButton>\n          )}\n        </ListItemButton>\n      </ListItem>\n      {getNode(graph, edge.fromId) !== graph.root ? (\n        <div className={cx(classes.connector, classes.connectorLeft)} />\n      ) : null}\n      <div className={cx(classes.connector, classes.connectorRight)} />\n    </div>\n  )\n}\n\nconst useStyles = makeStyles<\n  {\n    enabled: boolean\n    chained: EdgeChainState\n    cycled: EdgeChainState\n    activeNode: boolean\n    activeEdge: boolean\n    opened: boolean\n  },\n  \"connectorLeft\"\n>({ name: \"TreeItem\" })(\n  (\n    theme,\n    { enabled, chained, activeNode, activeEdge, opened, cycled },\n    classes\n  ) => {\n    const background = theme.palette.background.default\n    const lineWidth = theme.graph.treeLevelGap / 2\n    const lineSize = theme.graph.treeLineSize\n    const lineColor = getLineColor(theme, {\n      enabled,\n      chained: activeNode || !!chained,\n      cycled: !!cycled && cycled !== \"lone\",\n    })\n    const parentLineColor = getLineColor(theme, {\n      enabled,\n      chained: chained && chained !== \"start\",\n      cycled: cycled && cycled !== \"start\" && cycled !== \"lone\",\n    })\n    const childLineColor = getLineColor(theme, {\n      enabled,\n      chained: chained && chained !== \"end\",\n      cycled: cycled && cycled !== \"end\" && cycled !== \"lone\",\n    })\n    return {\n      root: {\n        height: 64,\n        padding: `2px ${lineWidth + 1}px`,\n        background: `linear-gradient(90deg, transparent, ${background} ${\n          lineWidth - 4\n        }px, ${background} calc(100% - ${lineWidth - 4}px), transparent)`,\n        [`&:hover .${classes.connectorLeft}`]: {\n          opacity: 1,\n        },\n      },\n      edge: {\n        height: \"100%\",\n        border: \"1px solid\",\n        borderRadius: 2,\n        borderColor: lineColor,\n        borderLeftWidth:\n          cycled === \"start\" || (!cycled && chained === \"start\") ? 4 : 1,\n        borderRightWidth:\n          cycled === \"end\" || (!cycled && chained === \"end\") ? 4 : 1,\n        borderTopWidth: activeNode ? 4 : 1,\n        borderBottomWidth: activeNode ? 4 : 1,\n        transition: \"all 200ms\",\n      },\n      cycleIcon: {\n        position: \"absolute\",\n        right: 0,\n      },\n      connector: {\n        position: \"absolute\",\n        width: lineWidth,\n        height: lineSize,\n        top: `calc(50% - ${lineSize / 2}px)`,\n      },\n      connectorLeft: {\n        left: 0,\n        opacity: opened || cycled === \"end\" ? 1 : 0,\n        background: `linear-gradient(90deg, ${theme.graph.treeRailColor}, ${parentLineColor})`,\n      },\n      connectorRight: {\n        right: 0,\n        opacity: opened ? 1 : 0,\n        background: `linear-gradient(90deg, ${childLineColor}, ${theme.graph.treeRailColor})`,\n      },\n    }\n  }\n)\n","import { forwardRef, ReactNode, useMemo } from \"react\"\nimport { getNode, GraphEdge, GraphNode } from \"../../analysis/graph\"\nimport { getNodeGroup } from \"../../analysis/groups\"\nimport EmptyBox from \"../EmptyBox\"\nimport { useStablePromise } from \"../hooks/promises\"\nimport { makeStyles } from \"../makeStyles\"\nimport NodeName from \"../nodes/NodeName\"\nimport ElementList, { OrderBySpec } from \"./ElementList\"\nimport { useTreeContext } from \"./TreeContext\"\nimport TreeItem from \"./TreeItem\"\n\ntype Props = {\n  parentNode?: GraphNode | null\n  node: GraphNode\n  childNode?: GraphNode | null\n  activateEdge: (node: GraphEdge) => void\n  activateNode: (node: GraphNode) => void\n  className?: string\n  levelIndex: number\n  renderEmpty: () => ReactNode\n}\n\nconst useStyles = makeStyles({ name: \"TreeLevel\" })((theme) => {\n  const railWidth = theme.graph.treeRailSize\n  return {\n    root: {\n      display: \"flex\",\n      flexDirection: \"column\",\n    },\n    list: {\n      flexGrow: 1,\n    },\n    listContainer: {\n      marginTop: theme.spacing(1),\n      marginLeft: -theme.graph.treeLevelGap / 2 - railWidth / 2,\n      marginRight: -theme.graph.treeLevelGap / 2 - railWidth / 2,\n    },\n    rail: {\n      width: railWidth,\n      background: theme.graph.treeRailColor,\n      position: \"absolute\",\n      top: theme.graph.treeItemHeight / 2,\n      bottom: theme.graph.treeItemHeight / 2,\n      borderRadius: railWidth,\n    },\n    left: {\n      left: 0,\n    },\n    right: {\n      right: 0,\n    },\n  }\n})\n\nfunction TreeLevel(\n  {\n    node,\n    childNode,\n    activateEdge,\n    activateNode,\n    className,\n    levelIndex,\n    renderEmpty,\n  }: Props,\n  ref: any\n) {\n  const {\n    graph,\n    graphWorker,\n    pinned,\n    getChildEdges,\n    chainedNodeIds,\n    activeNodeId,\n  } = useTreeContext()\n  const { classes, cx } = useStyles()\n\n  const {\n    value: edges,\n    loading,\n    error,\n  } = useStablePromise(\n    useMemo(() => getChildEdges(node), [getChildEdges, node])\n  )\n  const stickyItems = useMemo(\n    () =>\n      [\n        ...(edges || []).filter((e) => getNode(graph, e.toId) === childNode),\n        ...(edges || []).filter((e) => e.toId === activeNodeId),\n        ...(edges || []).filter((e) => chainedNodeIds.includes(e.toId)),\n      ].slice(0, 5),\n    [graph, activeNodeId, chainedNodeIds, childNode, edges]\n  )\n  const orderItemsBy: OrderBySpec = useMemo(\n    () => [\n      [\n        (edge: GraphEdge) => getNodeGroup(getNode(graph, edge.toId)).priority,\n        \"name\",\n      ],\n      [\"desc\", \"asc\"],\n    ],\n    [graph]\n  )\n\n  return (\n    <div className={cx(className, classes.root)} ref={ref}>\n      <NodeName node={node} />\n      <ElementList\n        className={classes.list}\n        listClassName={classes.listContainer}\n        items={edges || []}\n        graph={graph}\n        graphWorker={graphWorker}\n        pinned={pinned}\n        orderItemsBy={orderItemsBy}\n        itemSize={64}\n        stickyItems={stickyItems}\n        loading={loading}\n        error={error}\n        renderItem={({ item, ...itemProps }) => (\n          <TreeItem\n            {...itemProps}\n            edge={item}\n            levelIndex={levelIndex}\n            selected={item.toId === childNode?.id}\n            retainerRootNode={graph.root}\n            onClick={(event) => {\n              if (event.shiftKey) {\n                activateNode(getNode(graph, item.toId))\n              }\n              activateEdge(item)\n            }}\n            // checked={selected ? selected.id === itemProps.node.id : false}\n          />\n        )}\n        renderEmpty={() => <EmptyBox>{renderEmpty()}</EmptyBox>}\n      >\n        <div className={cx(classes.rail, classes.left)} />\n        <div className={cx(classes.rail, classes.right)} />\n      </ElementList>\n    </div>\n  )\n}\n\nexport default forwardRef(TreeLevel)\n","import { Paper } from \"@mui/material\"\nimport { first, intersection, isEqual, last, nth, uniq } from \"lodash\"\nimport { useCallback, useEffect, useMemo, useRef } from \"react\"\nimport { useVirtual } from \"react-virtual\"\nimport { EdgeChain } from \"../../analysis/chains\"\nimport {\n  currentGraphFilter,\n  stopOnAsyncModulesFilter,\n} from \"../../analysis/filters\"\nimport {\n  getAllNodes,\n  getEdgeId,\n  getEdges,\n  getNode,\n  getNodes,\n  Graph,\n  GraphNode,\n  GraphNodeID,\n  resolveEdge,\n  resolveNode,\n} from \"../../analysis/graph\"\nimport { GraphWorkerClient } from \"../../analysis/worker/GraphWorkerClient\"\nimport { UpdateChangesFn } from \"../../logic/useGraphState\"\nimport { useHistoryStateLense } from \"../../logic/useHistoryState\"\nimport { TogglePinnedFn } from \"../../logic/usePinnedState\"\nimport { useStablePromise } from \"../hooks/promises\"\nimport { PromiseTrackerFn } from \"../hooks/usePromiseTracker\"\nimport LoadingBoundary from \"../LoadingBoundary\"\nimport { makeStyles } from \"../makeStyles\"\nimport ActiveEdgeInfo from \"./info/ActiveEdgeInfo\"\nimport ActiveNodeInfo from \"./info/ActiveNodeInfo\"\nimport RootInfo from \"./info/RootInfo\"\nimport NodeNavigator, { NavigatorMode, NavigatorModes } from \"./NodeNavigator\"\nimport { TreeContextProvider } from \"./TreeContext\"\nimport TreeLevel from \"./TreeLevel\"\n\ntype Props = {\n  graph: Graph\n  graphWorker: GraphWorkerClient\n  pinned: ReadonlyArray<GraphNodeID>\n  togglePinned: TogglePinnedFn\n  className?: string\n  trackLoading: PromiseTrackerFn\n  updateChanges: UpdateChangesFn\n  mode: \"async\" | \"modules\" | \"cycles\"\n}\n\nconst getTreeLevelWidth = () => 350\n\nfunction TreePage({\n  graph,\n  graphWorker,\n  pinned,\n  togglePinned,\n  className,\n  trackLoading,\n  updateChanges,\n  mode: modeId,\n}: Props) {\n  const { classes, cx, theme } = useStyles()\n  const [activeEdgeId, setActiveEdgeId] = useHistoryStateLense(\n    \"activeEdgeId\",\n    (v) => resolveEdge(graph, v)\n  )\n  const [activeNodeId, setActiveNodeId] = useHistoryStateLense(\n    \"activeNodeId\",\n    (v) => resolveNode(graph, v)\n  )\n  const [openedNodeIds, setOpenedNodeIds] = useHistoryStateLense(\n    \"openedNodeIds\",\n    (v) => getNodes(graph, v)\n  )\n  const activeEdge = resolveEdge(graph, activeEdgeId)\n\n  // Tree Modes -------------------------------------\n\n  const { getChildEdges, renderEmptyChildren, navigatorModes, normalizePath } =\n    useMemo(() => {\n      const defaults = {\n        renderEmptyChildren: () => \"Module doesn’t import anything\",\n      }\n      switch (modeId) {\n        case \"async\":\n          return {\n            ...defaults,\n            normalizePath: (path: GraphNodeID[]) =>\n              path.filter(\n                // remove nodes that don't have async connection to the parent\n                (nodeId, index) =>\n                  index === 0 ||\n                  resolveEdge(graph, getEdgeId(path[index - 1], nodeId))?.async\n              ),\n            getChildEdges: (node: GraphNode) =>\n              graphWorker\n                .getAsyncEdges(node, stopOnAsyncModulesFilter)\n                .then((ids) => getEdges(graph, ids)),\n            renderEmptyChildren: () => (\n              <span>\n                There are no deeper split points\n                <br />\n                Go to \"Modules\" tab to browse modules\n              </span>\n            ),\n            navigatorModes: {\n              children: {\n                getItems: () =>\n                  graphWorker\n                    .getAsyncEdges(\n                      resolveNode(\n                        graph,\n                        resolveEdge(graph, activeEdgeId)?.toId\n                      ) || graph.root\n                    )\n                    .then((ids) => getEdges(graph, ids))\n                    .then((edges) =>\n                      uniq(edges.map((edge) => getNode(graph, edge.toId)))\n                    ),\n                renderTitle: () => \"Child Split Points\",\n                renderEmpty: () => \"Nothing found\",\n              },\n              all: {\n                getItems: () =>\n                  graphWorker\n                    .getAsyncEdges(graph.root)\n                    .then((ids) => getEdges(graph, ids))\n                    .then((edges) =>\n                      uniq(edges.map((edge) => getNode(graph, edge.toId)))\n                    ),\n                renderTitle: () => \"All Split Points\",\n                renderEmpty: () => \"Nothing found\",\n              },\n            } as NavigatorModes,\n          }\n\n        case \"modules\":\n          return {\n            ...defaults,\n            normalizePath: (path: GraphNodeID[]) => path,\n            getChildEdges: (node: GraphNode) => node.children,\n            navigatorModes: {\n              children: {\n                getItems: () =>\n                  graphWorker\n                    .getDeepNodeChildren(\n                      resolveNode(\n                        graph,\n                        resolveEdge(graph, activeEdgeId)?.toId\n                      ) || graph.root,\n                      currentGraphFilter\n                    )\n                    .then((ids) => getNodes(graph, ids)),\n                renderTitle: () => \"Loaded Child Modules\",\n                renderEmpty: () => \"Nothing found\",\n              },\n              retainedByNode: {\n                getItems: () =>\n                  graphWorker\n                    .getNodesRetainedByNode(\n                      graph.root,\n                      resolveNode(\n                        graph,\n                        resolveEdge(graph, activeEdgeId)?.toId\n                      ) || graph.root,\n                      currentGraphFilter\n                    )\n                    .then((ids) => getNodes(graph, ids)),\n                renderTitle: () => \"Retained Child Modules\",\n                renderEmpty: () => \"Nothing found\",\n              },\n              parents: {\n                getItems: () =>\n                  activeEdge\n                    ? graphWorker\n                        .getEnabledParentEdges(\n                          getNode(graph, activeEdge.toId),\n                          currentGraphFilter\n                        )\n                        .then((ids) => getEdges(graph, ids))\n                    : [],\n                getItemNode: (graph, edge) => getNode(graph, edge.fromId),\n                activateItem: (edge, event) => {\n                  if (event.shiftKey) setActiveNodeId(edge.fromId)\n                  openNodeChain(getNodes(graph, [edge.fromId, edge.toId]))\n                },\n                renderTitle: () => \"Loaded Parent Modules\",\n                renderEmpty: () => \"Nothing found\",\n              },\n              enabled: {\n                getItems: () =>\n                  graphWorker\n                    .getDeepNodeChildren(graph.root, currentGraphFilter)\n                    .then((ids) => getNodes(graph, ids)),\n                renderTitle: () => \"All Loaded Modules\",\n                renderEmpty: () => \"Nothing found\",\n              },\n              all: {\n                getItems: () => getAllNodes(graph),\n                renderTitle: () => \"All Modules\",\n                renderEmpty: () => \"Nothing found\",\n              },\n            } as NavigatorModes,\n          }\n\n        case \"cycles\":\n          return {\n            ...defaults,\n            normalizePath: (path: GraphNodeID[]) => path,\n            getChildEdges: (node: GraphNode) => node.children,\n            navigatorModes: {\n              cycles: {\n                getItems: () =>\n                  graphWorker.findNodeCycles(graph.root, currentGraphFilter),\n                getItemNode: (graph, cycle) =>\n                  getNode(graph, cycle[cycle.length - 1]),\n                activateItem: (cycle, event) => {\n                  setActiveNodeId(first(cycle)!)\n                  openNodeChain(getNodes(graph, cycle))\n                },\n                renderTitle: () => \"Cycles\",\n                renderEmpty: () => \"Nothing found\",\n              } as NavigatorMode<EdgeChain>,\n            } as NavigatorModes,\n          }\n      }\n      // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [modeId, graph, graphWorker, activeEdgeId])\n\n  // Analyse tree based on current choice\n\n  const { value: enabledIds, promise: enabledIdsPromise } = useStablePromise(\n    useMemo(async () => {\n      const edgeIds = await graphWorker.getEnabledChildEdges(graph.root)\n      const nodeIds = getEdges(graph, edgeIds).map((e) => e.toId)\n      return [...edgeIds, ...nodeIds]\n    }, [graph, graphWorker])\n  )\n  useEffect(() => {\n    trackLoading(enabledIdsPromise)\n  }, [enabledIdsPromise, trackLoading])\n\n  const { value: [chains, chainedNodeIds] = [], promise: chainsPromise } =\n    useStablePromise(\n      useMemo(async () => {\n        const activeNode = resolveNode(graph, activeNodeId)\n        const chains = activeNode\n          ? await graphWorker.findChains(\n              graph.root,\n              activeNode,\n              currentGraphFilter\n            )\n          : []\n        const chainedNodeIds = chains.flat()\n        return [chains, chainedNodeIds] as const\n      }, [graph, activeNodeId, graphWorker])\n    )\n  useEffect(() => {\n    trackLoading(chainsPromise)\n  }, [chainsPromise, trackLoading])\n\n  // Smooth scrolling to index ------------------------------\n\n  const treeLevelsRef = useRef<HTMLDivElement>(null)\n  const scrollToTimerRef = useRef<number>()\n  const scrollToTreeIndex = useCallback(\n    (index) => {\n      if (!treeLevelsRef.current)\n        throw new Error(\"Tree levels didnt render yet!\")\n      if (scrollToTimerRef.current)\n        cancelAnimationFrame(scrollToTimerRef.current)\n      scrollToTimerRef.current = undefined\n\n      const levelWidth = getTreeLevelWidth()\n      const padding = 16\n      const left = padding + index * (levelWidth + theme.graph.treeLevelGap)\n      const maxScrollLeft = left - padding\n      const minScrollLeft = Math.max(\n        0,\n        maxScrollLeft -\n          treeLevelsRef.current.offsetWidth +\n          levelWidth +\n          2 * padding\n      )\n      if (\n        treeLevelsRef.current.scrollLeft >= minScrollLeft &&\n        treeLevelsRef.current.scrollLeft <= maxScrollLeft\n      ) {\n        // within bounds - nothing to do\n        return\n      }\n      const scrollTo =\n        treeLevelsRef.current.scrollLeft > maxScrollLeft\n          ? maxScrollLeft\n          : minScrollLeft\n      console.log(\"scroll!\")\n      const diff = scrollTo - treeLevelsRef.current.scrollLeft\n      if (Math.abs(diff) > 5) {\n        treeLevelsRef.current.scrollLeft += diff / 2\n        if (scrollToTimerRef.current)\n          cancelAnimationFrame(scrollToTimerRef.current)\n        scrollToTimerRef.current = requestAnimationFrame(() =>\n          scrollToTreeIndex(index)\n        )\n      } else {\n        treeLevelsRef.current.scrollLeft = scrollTo\n      }\n    },\n    [theme]\n  )\n\n  // Opens a specific node or chain of nodes trying not to change the currently opened tree as much as possible\n  // To open a cycle, first and last nodes should be the same\n  const openNodeChain = useCallback(\n    (nodes: ReadonlyArray<GraphNode>) => {\n      const run = async () => {\n        const nodeIds = nodes.map(({ id }) => id)\n        const openingCycle = nodes.length > 1 && first(nodes) === last(nodes)\n\n        // Checks if one array contains another in full\n        function includesArray(\n          big: ReadonlyArray<any>,\n          small: ReadonlyArray<any>\n        ) {\n          if (big.length < small.length) return false\n          for (let i = 0; i <= big.length - small.length; ++i) {\n            if (isEqual(big.slice(i, i + small.length), small)) return true\n          }\n          return false\n        }\n\n        // Checks if path prefix doesn't introduce cycles when combined with suffix\n        function isCorrectNodePathPrefix(\n          prefix: GraphNodeID[],\n          suffix: GraphNodeID[]\n        ) {\n          // prefix cannot contain cycles itself\n          if (prefix.length !== uniq(prefix).length) return false\n          return intersection(prefix, suffix).length === 0\n        }\n\n        // yields chains that lead to the node in order of their usefullness\n        async function* findPrefixChains(toNode: GraphNode) {\n          const openedIndex = openedNodeIds.indexOf(toNode.id)\n          if (openedIndex > 0) {\n            // start with currently opened\n            yield openedNodeIds.slice(0, openedIndex + 1)\n          }\n          if (activeEdge && openedNodeIds.includes(activeEdge.id)) {\n            const prefix = openedNodeIds.slice(\n              0,\n              openedNodeIds.indexOf(activeEdge.id)\n            )\n            // try enabled chains starting from active edge\n            let chains = await graphWorker.findChains(\n              getNode(graph, activeEdge.toId),\n              toNode,\n              currentGraphFilter\n            )\n            yield* chains.map((chain) => [...prefix, ...chain])\n            // try all chains starting from active edge\n            chains = await graphWorker.findChains(\n              getNode(graph, activeEdge.toId),\n              toNode\n            )\n            yield* chains.map((chain) => [...prefix, ...chain])\n          }\n          // enabled chains from root\n          yield* await graphWorker.findChains(\n            graph.root,\n            toNode,\n            currentGraphFilter\n          )\n          // all chains from root\n          yield* await graphWorker.findChains(graph.root, toNode)\n        }\n\n        let newOpenedNodeIds: GraphNodeID[] | undefined\n        let prefixedNodeIds: GraphNodeID[] | undefined\n        // if path is already opened - don't change it\n        if (includesArray(openedNodeIds, normalizePath(nodeIds))) {\n          newOpenedNodeIds = openedNodeIds\n          prefixedNodeIds = openedNodeIds.slice(\n            0,\n            openedNodeIds.lastIndexOf(last(nodeIds)!) + 1\n          )\n        } else if (first(nodes) === graph.root) {\n          newOpenedNodeIds = nodeIds\n        } else {\n          // iterate through possible path prefixes. choose the first that creates an acceptable path (without cycles)\n          for await (let prefix of findPrefixChains(first(nodes)!)) {\n            prefix = prefix.slice(0, -1) // prefix includes the first node\n            if (isCorrectNodePathPrefix(prefix, nodeIds)) {\n              newOpenedNodeIds = [...prefix, ...nodeIds]\n              break\n            }\n          }\n        }\n        // if there's a path to activeNode (and it isn't on the path already) - open it as well\n        prefixedNodeIds ??= newOpenedNodeIds\n        if (\n          newOpenedNodeIds &&\n          activeNodeId &&\n          !openingCycle &&\n          !newOpenedNodeIds.includes(activeNodeId)\n        ) {\n          for await (let suffix of await graphWorker.findChains(\n            getNode(graph, last(newOpenedNodeIds)!),\n            getNode(graph, activeNodeId)\n          )) {\n            suffix = suffix.slice(1) // suffix contains the fromNode\n            if (isCorrectNodePathPrefix(newOpenedNodeIds, suffix)) {\n              newOpenedNodeIds = [...newOpenedNodeIds, ...suffix]\n              break\n            }\n          }\n        }\n        if (!newOpenedNodeIds || !prefixedNodeIds) {\n          // eslint-disable-next-line no-throw-literal\n          throw `Node ${\n            first(nodes)!.name || first(nodes)!.id\n          } is not connected to anything`\n        }\n\n        if (prefixedNodeIds.length > 1) {\n          setActiveEdgeId(\n            getEdgeId(nth(prefixedNodeIds, -2)!, nth(prefixedNodeIds, -1)!)\n          )\n        }\n\n        if (openingCycle) {\n          // remove the last cycled node\n          newOpenedNodeIds = newOpenedNodeIds.slice(0, -1)\n        }\n\n        // activate the last node (or edge if there's a cycle) - ignore the suffixed part leading to active node\n        if (newOpenedNodeIds !== openedNodeIds) {\n          setOpenedNodeIds(normalizePath(newOpenedNodeIds))\n        }\n        scrollToTreeIndex(\n          Math.min(\n            normalizePath(prefixedNodeIds).length,\n            normalizePath(newOpenedNodeIds).length\n          ) - 1\n        )\n      }\n      trackLoading(run())\n    },\n    [\n      trackLoading,\n      openedNodeIds,\n      normalizePath,\n      graph,\n      activeNodeId,\n      scrollToTreeIndex,\n      activeEdge,\n      graphWorker,\n      setActiveEdgeId,\n      setOpenedNodeIds,\n    ]\n  )\n\n  // Normalize path after mode change\n  useEffect(() => {\n    if (activeEdge) {\n      openNodeChain([\n        getNode(graph, activeEdge.fromId),\n        getNode(graph, activeEdge.toId),\n      ])\n    } else {\n      openNodeChain([graph.root])\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [modeId])\n\n  const { virtualItems: virtualTreeLevels } = useVirtual({\n    size: openedNodeIds.length,\n    parentRef: treeLevelsRef,\n    horizontal: true,\n    estimateSize: useCallback(\n      () => getTreeLevelWidth() + theme.graph.treeLevelGap,\n      [theme]\n    ),\n  })\n\n  const treeLevels = openedNodeIds.map((nodeId, index) => {\n    if (!virtualTreeLevels.find((vtr) => vtr.index === index))\n      return <div key={index} className={classes.treeLevel}></div>\n    return (\n      <TreeLevel\n        key={index}\n        levelIndex={index}\n        className={classes.treeLevel}\n        node={getNode(graph, nodeId)}\n        childNode={resolveNode(graph, openedNodeIds[index + 1])}\n        activateEdge={(edge) => {\n          const openedAtIndex = openedNodeIds.indexOf(edge.toId)\n          if (openedAtIndex >= 0 && openedAtIndex < index) {\n            // handle navigating to a cycle start (opening the from->to edge will cause opening a path that doesn't have a cycle)\n            openNodeChain([getNode(graph, edge.toId)])\n          } else {\n            openNodeChain([\n              getNode(graph, edge.fromId),\n              getNode(graph, edge.toId),\n            ])\n          }\n        }}\n        activateNode={(node) => {\n          setActiveNodeId(node.id)\n        }}\n        renderEmpty={renderEmptyChildren}\n      />\n    )\n  })\n\n  return (\n    <div className={cx(className, classes.TreePage)}>\n      <TreeContextProvider\n        value={{\n          graph,\n          graphWorker,\n          pinned,\n          togglePinned,\n          enabledIds: enabledIds || [],\n          activeEdgeId: activeEdgeId,\n          openNodeChain,\n          openedNodeIds,\n          setOpenedNodeIds,\n          activeNodeId,\n          setActiveNodeId,\n          trackLoading,\n          updateChanges,\n          chains: chains || [],\n          chainedNodeIds: chainedNodeIds || [],\n          getChildEdges,\n        }}\n      >\n        <div className={classes.info}>\n          <RootInfo />\n          <ActiveEdgeInfo />\n          <ActiveNodeInfo />\n        </div>\n        <div className={classes.treeLevels} ref={treeLevelsRef}>\n          {treeLevels}\n        </div>\n        <div className={classes.treeShadeLeft}></div>\n        <div className={classes.treeShadeRight}></div>\n        <Paper className={classes.navigator}>\n          <LoadingBoundary fallback={\"...\"}>\n            <NodeNavigator modes={navigatorModes} key={modeId} />\n          </LoadingBoundary>\n        </Paper>\n      </TreeContextProvider>\n    </div>\n  )\n}\n\nconst useStyles = makeStyles({ name: \"TreePage\" })((theme) => ({\n  TreePage: {\n    flexGrow: 1,\n    display: \"grid\",\n    grid: \"[info] auto [navigation] 1fr / 1fr 350px\",\n    gap: theme.spacing(3),\n    padding: theme.spacing(3),\n  },\n  info: {\n    gridArea: \"info / span 2\",\n    display: \"grid\",\n    gridAutoFlow: \"column\",\n    gridAutoColumns: \"minmax(0, 1fr)\",\n    gap: theme.spacing(3),\n  },\n  treeLevels: {\n    position: \"relative\",\n    gridArea: \"navigation / 1\",\n    display: \"grid\",\n    grid: \"100% / auto-flow\",\n    gap: theme.graph.treeLevelGap,\n    overflowX: \"auto\",\n    justifyContent: \"flex-start\",\n    marginLeft: `-${theme.spacing(2)}`,\n    padding: `0px ${theme.spacing(2)}`,\n  },\n  treeShadeLeft: {\n    gridArea: \"navigation / 1\",\n    width: theme.spacing(2),\n    marginLeft: `-${theme.spacing(2)}`,\n    background: `linear-gradient(90deg, ${theme.palette.background.default}, transparent)`,\n    zIndex: 1,\n  },\n  treeShadeRight: {\n    gridArea: \"navigation / 1\",\n    width: theme.spacing(2),\n    justifySelf: \"self-end\",\n    background: `linear-gradient(-90deg, ${theme.palette.background.default}, transparent)`,\n    zIndex: 1,\n  },\n\n  treeLevel: {\n    width: getTreeLevelWidth(),\n    height: \"100%\",\n  },\n  navigator: {\n    gridArea: \"navigation / span 1\",\n    padding: theme.spacing(2),\n    display: \"grid\",\n  },\n}))\n\nexport default TreePage\n"],"names":["EmptyBox","children","icon","direction","justifyContent","sx","padding","color","spacing","FILENAME_RE","getPackageName","file","found","match","useStyles","makeStyles","name","theme","root","maxWidth","display","flexDirection","whiteSpace","overflow","packageName","textOverflow","flexShrink","path","minWidth","extension","NodeName","node","hidePackage","onlyPackage","tooltip","className","classes","cx","info","id","String","pathToPackage","getModuleInfo","replace","text","Tooltip","title","kind","originalId","placement","enterDelay","disableFocusListener","transition","opacity","oldValue","error","marginLeft","PromisedValue","promise","render","value","loading","useStablePromise","hasValue","undefined","Skeleton","style","variant","width","Report","TreeContext","createContext","useTreeContext","useContext","TreeContextProvider","Provider","bigger","red","smaller","green","NodeSize","retainerRootNode","graph","graphWorker","useMemo","async","treeSizeCalculator","filter","calculateTreeSizeRetainedByNode","calculateTreeSize","baseTreeSize","baseGraphFilter","treeSize","currentGraphFilter","formatSize","size","Math","abs","bar","borderRadius","height","background","part","textIndent","marginRight","fontSize","GroupSizesInfo","calculateGroupSizes","groups","overalSize","reduce","sum","map","group","count","palette","colorName","main","contrastText","max","round","toLocaleUpperCase","spacer","flexGrow","grid","gridAutoFlow","code","margin","marginTop","marginBottom","border","alpha","primary","ActiveEdgeInfo","activeEdgeId","setActiveNodeId","activeNodeId","pinned","togglePinned","edge","resolveEdge","fromNode","resolveNode","fromId","isPinned","includes","toId","Paper","Box","Typography","IconButton","onClick","disabled","Flag","Star","StarBorder","getNode","fromSource","language","syntaxStyle","ellipsis","scrollable","overflowX","ActiveNodeInfo","openNodeChain","startCase","CenterFocusStrong","CropFree","getEnabledParentEdges","edges","length","ChangeValue","desc","format","better","success","numeral","snippet","LoadoutDialog","open","onClose","updateChanges","loadInfo","setLoadInfo","useState","loadIds","invalidLoadIds","JSON","parse","flat","e","console","Dialog","DialogTitle","DialogContent","DialogContentText","Stack","alignItems","gap","navigator","clipboard","writeText","ContentCopy","TextField","autoFocus","multiline","label","fullWidth","maxRows","onChange","target","DialogActions","Button","enableEdges","Object","values","asyncIds","some","log","changes","addEdgeToggleChange","RootInfo","showLoadoutDialog","setShowLoadoutDialog","sizePromise","currentSize","baseSize","overallSize","allAsyncAndEnabledFilter","resetEdgeToggles","Clear","DoneAll","AutoFixHigh","groupsSpec","test","priority","getNodeGroup","RegExp","Error","getScore","search","negated","score","endsWith","min","createMatcher","toLocaleLowerCase","slice","defaultGetChildren","row","defaultGetKey","isTreeExpanded","state","options","getKey","expanded","indexOf","flattenTreeToRows","tree","result","getChildren","push","Array","isArray","warn","toggleTreeRowState","expand","current","key","toggleTreeRow","paper","backgroundImage","zIndex","ElementListGroup","ListItem","dense","ContainerComponent","disableGutters","position","top","bottom","divider","ListItemButton","ListItemText","secondary","ExpandLess","ExpandMore","isGroup","item","listContainer","list","treeOptions","getNodeFromElement","element","listClassName","renderItem","renderEmpty","items","itemSize","stickyItems","orderItemsBy","groupItemsBy","orderGroupsBy","setSearch","treeState","setTreeState","useTreeSize","setUseTreeSize","isGrouping","preppedItems","prepLoading","prepError","Promise","all","filteredItems","searchedItems","getNodeFromItem","matchers","split","matcher","matched","Boolean","sort","a","b","searchItems","orderBy","pinnedItems","listItems","rows","groupBy","sumBy","without","unshift","stickyGroupHeaders","stickyIndexes","uniq","index","renderIndex","stickyElements","sticked","lastIndex","Fragment","left","estimateSize","useCallback","parentRef","useRef","virtualItems","totalSize","useVirtual","Input","type","el","endAdornment","InputAdornment","Scale","placeholder","LinearProgress","visibility","ErrorBox","ref","start","NodeNavigatorItem","activeNode","treeLineColor","chained","selected","onDoubleClick","activeEdge","isActiveNode","isActiveEdge","primaryTypographyProps","noWrap","fontWeight","NodeNavigator","listProgress","modes","modeId","setModeId","defaultModeId","keys","mode","nodesPromise","getItems","nodes","nodesMode","getItemNode","_","FormControl","InputLabel","Select","labelId","entries","MenuItem","renderTitle","itemProps","event","activateItem","shiftKey","Block","EdgeSize","calculateTreeSizeRetainedByEdge","nodeTreeSize","getLineColor","enabled","cycled","TreeItem","levelIndex","enabledIds","openedNodeIds","opened","toggleable","containsActiveNodeState","getDeepNodeChildren","then","ids","containsActiveNode","ROOT_NODE_ID","getChainedState","isCycleEnd","isOpened","cycleStartIndex","cycleEndIndex","activeLevelIndex","cyclingNodeId","find","nodeId","getEdgeId","getCycledState","handleToggleChange","checked","changeEdges","parentChain","findChains","parentDisabledChain","getEdgesFromChain","altKey","getEdges","getAsyncEdges","stopOnAsyncModulesFilter","changeEdge","checkboxProps","DownloadForOfflineOutlined","checkedIcon","DownloadForOffline","ListItemIcon","Checkbox","stopPropagation","ChangeCircle","cycleIcon","connector","connectorLeft","connectorRight","default","lineWidth","treeLevelGap","lineSize","treeLineSize","lineColor","parentLineColor","childLineColor","borderColor","borderLeftWidth","borderRightWidth","borderTopWidth","borderBottomWidth","right","treeRailColor","railWidth","treeRailSize","rail","treeItemHeight","TreeLevel","childNode","activateEdge","activateNode","getChildEdges","chainedNodeIds","forwardRef","TreePage","gridArea","gridAutoColumns","treeLevels","treeShadeLeft","treeShadeRight","justifySelf","treeLevel","trackLoading","setActiveEdgeId","useHistoryStateLense","v","setOpenedNodeIds","getNodes","renderEmptyChildren","navigatorModes","normalizePath","defaults","retainedByNode","getNodesRetainedByNode","parents","getAllNodes","cycles","findNodeCycles","cycle","first","enabledIdsPromise","edgeIds","getEnabledChildEdges","nodeIds","useEffect","chains","chainsPromise","treeLevelsRef","scrollToTimerRef","scrollToTreeIndex","cancelAnimationFrame","maxScrollLeft","minScrollLeft","offsetWidth","scrollLeft","scrollTo","diff","requestAnimationFrame","openingCycle","last","isCorrectNodePathPrefix","prefix","suffix","intersection","newOpenedNodeIds","prefixedNodeIds","big","small","i","isEqual","includesArray","lastIndexOf","toNode","openedIndex","chain","findPrefixChains","nth","run","virtualTreeLevels","horizontal","vtr","openedAtIndex","LoadingBoundary","fallback"],"sourceRoot":""}